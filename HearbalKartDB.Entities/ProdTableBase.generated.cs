
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ProdTable.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using HearbalKartDB.Entities.Validation;
#endregion

namespace HearbalKartDB.Entities
{
	///<summary>
	/// An object representation of the 'ProdTable' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ProdTableBase : EntityBase, IProdTable, IEntityId<ProdTableKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ProdTableEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ProdTableEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ProdTableEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ProdTable> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ProdTableEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ProdTableEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ProdTableBase"/> instance.
		///</summary>
		public ProdTableBase()
		{
			this.entityData = new ProdTableEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ProdTableBase"/> instance.
		///</summary>
		///<param name="_itemId"></param>
		///<param name="_categoryId"></param>
		///<param name="_companyId"></param>
		///<param name="_typeId"></param>
		///<param name="_supplementId"></param>
		///<param name="_medicineForId"></param>
		///<param name="_purchaseId"></param>
		///<param name="_sellId"></param>
		///<param name="_offerId"></param>
		///<param name="_isActive"></param>
		///<param name="_createdDate"></param>
		///<param name="_modifiedDate"></param>
		///<param name="_deletedDate"></param>
		///<param name="_imageUrl"></param>
		public ProdTableBase(System.Int32? _itemId, System.Int32? _categoryId, System.Int32? _companyId, 
			System.Int32? _typeId, System.Int32? _supplementId, System.Int32? _medicineForId, System.Int32? _purchaseId, 
			System.Int32? _sellId, System.Int32? _offerId, System.Boolean? _isActive, System.DateTime? _createdDate, 
			System.DateTime? _modifiedDate, System.DateTime? _deletedDate, System.String _imageUrl)
		{
			this.entityData = new ProdTableEntityData();
			this.backupData = null;

			this.ItemId = _itemId;
			this.CategoryId = _categoryId;
			this.CompanyId = _companyId;
			this.TypeId = _typeId;
			this.SupplementId = _supplementId;
			this.MedicineForId = _medicineForId;
			this.PurchaseId = _purchaseId;
			this.SellId = _sellId;
			this.OfferId = _offerId;
			this.IsActive = _isActive;
			this.CreatedDate = _createdDate;
			this.ModifiedDate = _modifiedDate;
			this.DeletedDate = _deletedDate;
			this.ImageUrl = _imageUrl;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ProdTable"/> instance.
		///</summary>
		///<param name="_itemId"></param>
		///<param name="_categoryId"></param>
		///<param name="_companyId"></param>
		///<param name="_typeId"></param>
		///<param name="_supplementId"></param>
		///<param name="_medicineForId"></param>
		///<param name="_purchaseId"></param>
		///<param name="_sellId"></param>
		///<param name="_offerId"></param>
		///<param name="_isActive"></param>
		///<param name="_createdDate"></param>
		///<param name="_modifiedDate"></param>
		///<param name="_deletedDate"></param>
		///<param name="_imageUrl"></param>
		public static ProdTable CreateProdTable(System.Int32? _itemId, System.Int32? _categoryId, System.Int32? _companyId, 
			System.Int32? _typeId, System.Int32? _supplementId, System.Int32? _medicineForId, System.Int32? _purchaseId, 
			System.Int32? _sellId, System.Int32? _offerId, System.Boolean? _isActive, System.DateTime? _createdDate, 
			System.DateTime? _modifiedDate, System.DateTime? _deletedDate, System.String _imageUrl)
		{
			ProdTable newProdTable = new ProdTable();
			newProdTable.ItemId = _itemId;
			newProdTable.CategoryId = _categoryId;
			newProdTable.CompanyId = _companyId;
			newProdTable.TypeId = _typeId;
			newProdTable.SupplementId = _supplementId;
			newProdTable.MedicineForId = _medicineForId;
			newProdTable.PurchaseId = _purchaseId;
			newProdTable.SellId = _sellId;
			newProdTable.OfferId = _offerId;
			newProdTable.IsActive = _isActive;
			newProdTable.CreatedDate = _createdDate;
			newProdTable.ModifiedDate = _modifiedDate;
			newProdTable.DeletedDate = _deletedDate;
			newProdTable.ImageUrl = _imageUrl;
			return newProdTable;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Id is required")]




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(ProdTableColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProdTableColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ItemId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ItemId
		{
			get
			{
				return this.entityData.ItemId; 
			}
			
			set
			{
				if (this.entityData.ItemId == value)
					return;
				
                OnPropertyChanging("ItemId");                    
				OnColumnChanging(ProdTableColumn.ItemId, this.entityData.ItemId);
				this.entityData.ItemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProdTableColumn.ItemId, this.entityData.ItemId);
				OnPropertyChanged("ItemId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CategoryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CategoryId
		{
			get
			{
				return this.entityData.CategoryId; 
			}
			
			set
			{
				if (this.entityData.CategoryId == value)
					return;
				
                OnPropertyChanging("CategoryId");                    
				OnColumnChanging(ProdTableColumn.CategoryId, this.entityData.CategoryId);
				this.entityData.CategoryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProdTableColumn.CategoryId, this.entityData.CategoryId);
				OnPropertyChanged("CategoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompanyId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CompanyId
		{
			get
			{
				return this.entityData.CompanyId; 
			}
			
			set
			{
				if (this.entityData.CompanyId == value)
					return;
				
                OnPropertyChanging("CompanyId");                    
				OnColumnChanging(ProdTableColumn.CompanyId, this.entityData.CompanyId);
				this.entityData.CompanyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProdTableColumn.CompanyId, this.entityData.CompanyId);
				OnPropertyChanged("CompanyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TypeId
		{
			get
			{
				return this.entityData.TypeId; 
			}
			
			set
			{
				if (this.entityData.TypeId == value)
					return;
				
                OnPropertyChanging("TypeId");                    
				OnColumnChanging(ProdTableColumn.TypeId, this.entityData.TypeId);
				this.entityData.TypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProdTableColumn.TypeId, this.entityData.TypeId);
				OnPropertyChanged("TypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SupplementId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SupplementId
		{
			get
			{
				return this.entityData.SupplementId; 
			}
			
			set
			{
				if (this.entityData.SupplementId == value)
					return;
				
                OnPropertyChanging("SupplementId");                    
				OnColumnChanging(ProdTableColumn.SupplementId, this.entityData.SupplementId);
				this.entityData.SupplementId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProdTableColumn.SupplementId, this.entityData.SupplementId);
				OnPropertyChanged("SupplementId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MedicineForId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MedicineForId
		{
			get
			{
				return this.entityData.MedicineForId; 
			}
			
			set
			{
				if (this.entityData.MedicineForId == value)
					return;
				
                OnPropertyChanging("MedicineForId");                    
				OnColumnChanging(ProdTableColumn.MedicineForId, this.entityData.MedicineForId);
				this.entityData.MedicineForId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProdTableColumn.MedicineForId, this.entityData.MedicineForId);
				OnPropertyChanged("MedicineForId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PurchaseId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PurchaseId
		{
			get
			{
				return this.entityData.PurchaseId; 
			}
			
			set
			{
				if (this.entityData.PurchaseId == value)
					return;
				
                OnPropertyChanging("PurchaseId");                    
				OnColumnChanging(ProdTableColumn.PurchaseId, this.entityData.PurchaseId);
				this.entityData.PurchaseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProdTableColumn.PurchaseId, this.entityData.PurchaseId);
				OnPropertyChanged("PurchaseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SellId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SellId
		{
			get
			{
				return this.entityData.SellId; 
			}
			
			set
			{
				if (this.entityData.SellId == value)
					return;
				
                OnPropertyChanging("SellId");                    
				OnColumnChanging(ProdTableColumn.SellId, this.entityData.SellId);
				this.entityData.SellId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProdTableColumn.SellId, this.entityData.SellId);
				OnPropertyChanged("SellId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OfferId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? OfferId
		{
			get
			{
				return this.entityData.OfferId; 
			}
			
			set
			{
				if (this.entityData.OfferId == value)
					return;
				
                OnPropertyChanging("OfferId");                    
				OnColumnChanging(ProdTableColumn.OfferId, this.entityData.OfferId);
				this.entityData.OfferId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProdTableColumn.OfferId, this.entityData.OfferId);
				OnPropertyChanged("OfferId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
				
                OnPropertyChanging("IsActive");                    
				OnColumnChanging(ProdTableColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProdTableColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
				
                OnPropertyChanging("CreatedDate");                    
				OnColumnChanging(ProdTableColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProdTableColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ModifiedDate
		{
			get
			{
				return this.entityData.ModifiedDate; 
			}
			
			set
			{
				if (this.entityData.ModifiedDate == value)
					return;
				
                OnPropertyChanging("ModifiedDate");                    
				OnColumnChanging(ProdTableColumn.ModifiedDate, this.entityData.ModifiedDate);
				this.entityData.ModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProdTableColumn.ModifiedDate, this.entityData.ModifiedDate);
				OnPropertyChanged("ModifiedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeletedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DeletedDate
		{
			get
			{
				return this.entityData.DeletedDate; 
			}
			
			set
			{
				if (this.entityData.DeletedDate == value)
					return;
				
                OnPropertyChanging("DeletedDate");                    
				OnColumnChanging(ProdTableColumn.DeletedDate, this.entityData.DeletedDate);
				this.entityData.DeletedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProdTableColumn.DeletedDate, this.entityData.DeletedDate);
				OnPropertyChanged("DeletedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ImageUrl property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String ImageUrl
		{
			get
			{
				return this.entityData.ImageUrl; 
			}
			
			set
			{
				if (this.entityData.ImageUrl == value)
					return;
				
                OnPropertyChanging("ImageUrl");                    
				OnColumnChanging(ProdTableColumn.ImageUrl, this.entityData.ImageUrl);
				this.entityData.ImageUrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProdTableColumn.ImageUrl, this.entityData.ImageUrl);
				OnPropertyChanged("ImageUrl");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="ItemPurchase"/>.
		/// </summary>
		/// <value>The source ItemPurchase for PurchaseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ItemPurchase PurchaseIdSource
      	{
            get { return entityData.PurchaseIdSource; }
            set { entityData.PurchaseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Items"/>.
		/// </summary>
		/// <value>The source Items for ItemId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Items ItemIdSource
      	{
            get { return entityData.ItemIdSource; }
            set { entityData.ItemIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ItemSell"/>.
		/// </summary>
		/// <value>The source ItemSell for SellId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ItemSell SellIdSource
      	{
            get { return entityData.SellIdSource; }
            set { entityData.SellIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ProdCompany"/>.
		/// </summary>
		/// <value>The source ProdCompany for CompanyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ProdCompany CompanyIdSource
      	{
            get { return entityData.CompanyIdSource; }
            set { entityData.CompanyIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ProdMedicineFor"/>.
		/// </summary>
		/// <value>The source ProdMedicineFor for MedicineForId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ProdMedicineFor MedicineForIdSource
      	{
            get { return entityData.MedicineForIdSource; }
            set { entityData.MedicineForIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ProdSubcategory"/>.
		/// </summary>
		/// <value>The source ProdSubcategory for CategoryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ProdSubcategory CategoryIdSource
      	{
            get { return entityData.CategoryIdSource; }
            set { entityData.CategoryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ProdSupplymentType"/>.
		/// </summary>
		/// <value>The source ProdSupplymentType for SupplementId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ProdSupplymentType SupplementIdSource
      	{
            get { return entityData.SupplementIdSource; }
            set { entityData.SupplementIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ProdType"/>.
		/// </summary>
		/// <value>The source ProdType for TypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ProdType TypeIdSource
      	{
            get { return entityData.TypeIdSource; }
            set { entityData.TypeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ProdTable"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "ItemID", "CategoryID", "CompanyID", "TypeID", "SupplementID", "MedicineForID", "PurchaseID", "SellID", "OfferID", "IsActive", "CreatedDate", "ModifiedDate", "DeletedDate", "ImageUrl"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ProdTableEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ProdTable) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ProdTable>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ProdTable);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ProdTable Entity 
		///</summary>
		protected virtual ProdTable Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ProdTable copy = new ProdTable();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.ItemId = this.ItemId;
				copy.CategoryId = this.CategoryId;
				copy.CompanyId = this.CompanyId;
				copy.TypeId = this.TypeId;
				copy.SupplementId = this.SupplementId;
				copy.MedicineForId = this.MedicineForId;
				copy.PurchaseId = this.PurchaseId;
				copy.SellId = this.SellId;
				copy.OfferId = this.OfferId;
				copy.IsActive = this.IsActive;
				copy.CreatedDate = this.CreatedDate;
				copy.ModifiedDate = this.ModifiedDate;
				copy.DeletedDate = this.DeletedDate;
				copy.ImageUrl = this.ImageUrl;
			
			if (this.PurchaseIdSource != null && existingCopies.Contains(this.PurchaseIdSource))
				copy.PurchaseIdSource = existingCopies[this.PurchaseIdSource] as ItemPurchase;
			else
				copy.PurchaseIdSource = MakeCopyOf(this.PurchaseIdSource, existingCopies) as ItemPurchase;
			if (this.ItemIdSource != null && existingCopies.Contains(this.ItemIdSource))
				copy.ItemIdSource = existingCopies[this.ItemIdSource] as Items;
			else
				copy.ItemIdSource = MakeCopyOf(this.ItemIdSource, existingCopies) as Items;
			if (this.SellIdSource != null && existingCopies.Contains(this.SellIdSource))
				copy.SellIdSource = existingCopies[this.SellIdSource] as ItemSell;
			else
				copy.SellIdSource = MakeCopyOf(this.SellIdSource, existingCopies) as ItemSell;
			if (this.CompanyIdSource != null && existingCopies.Contains(this.CompanyIdSource))
				copy.CompanyIdSource = existingCopies[this.CompanyIdSource] as ProdCompany;
			else
				copy.CompanyIdSource = MakeCopyOf(this.CompanyIdSource, existingCopies) as ProdCompany;
			if (this.MedicineForIdSource != null && existingCopies.Contains(this.MedicineForIdSource))
				copy.MedicineForIdSource = existingCopies[this.MedicineForIdSource] as ProdMedicineFor;
			else
				copy.MedicineForIdSource = MakeCopyOf(this.MedicineForIdSource, existingCopies) as ProdMedicineFor;
			if (this.CategoryIdSource != null && existingCopies.Contains(this.CategoryIdSource))
				copy.CategoryIdSource = existingCopies[this.CategoryIdSource] as ProdSubcategory;
			else
				copy.CategoryIdSource = MakeCopyOf(this.CategoryIdSource, existingCopies) as ProdSubcategory;
			if (this.SupplementIdSource != null && existingCopies.Contains(this.SupplementIdSource))
				copy.SupplementIdSource = existingCopies[this.SupplementIdSource] as ProdSupplymentType;
			else
				copy.SupplementIdSource = MakeCopyOf(this.SupplementIdSource, existingCopies) as ProdSupplymentType;
			if (this.TypeIdSource != null && existingCopies.Contains(this.TypeIdSource))
				copy.TypeIdSource = existingCopies[this.TypeIdSource] as ProdType;
			else
				copy.TypeIdSource = MakeCopyOf(this.TypeIdSource, existingCopies) as ProdType;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ProdTable Entity 
		///</summary>
		public virtual ProdTable Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ProdTable Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ProdTable DeepCopy()
		{
			return EntityHelper.Clone<ProdTable>(this as ProdTable);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ProdTableEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ProdTableEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ProdTableEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ProdTableColumn column)
		{
			switch(column)
			{
					case ProdTableColumn.Id:
					return entityData.Id != _originalData.Id;
					case ProdTableColumn.ItemId:
					return entityData.ItemId != _originalData.ItemId;
					case ProdTableColumn.CategoryId:
					return entityData.CategoryId != _originalData.CategoryId;
					case ProdTableColumn.CompanyId:
					return entityData.CompanyId != _originalData.CompanyId;
					case ProdTableColumn.TypeId:
					return entityData.TypeId != _originalData.TypeId;
					case ProdTableColumn.SupplementId:
					return entityData.SupplementId != _originalData.SupplementId;
					case ProdTableColumn.MedicineForId:
					return entityData.MedicineForId != _originalData.MedicineForId;
					case ProdTableColumn.PurchaseId:
					return entityData.PurchaseId != _originalData.PurchaseId;
					case ProdTableColumn.SellId:
					return entityData.SellId != _originalData.SellId;
					case ProdTableColumn.OfferId:
					return entityData.OfferId != _originalData.OfferId;
					case ProdTableColumn.IsActive:
					return entityData.IsActive != _originalData.IsActive;
					case ProdTableColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case ProdTableColumn.ModifiedDate:
					return entityData.ModifiedDate != _originalData.ModifiedDate;
					case ProdTableColumn.DeletedDate:
					return entityData.DeletedDate != _originalData.DeletedDate;
					case ProdTableColumn.ImageUrl:
					return entityData.ImageUrl != _originalData.ImageUrl;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ProdTableColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.ItemId != _originalData.ItemId;
			result = result || entityData.CategoryId != _originalData.CategoryId;
			result = result || entityData.CompanyId != _originalData.CompanyId;
			result = result || entityData.TypeId != _originalData.TypeId;
			result = result || entityData.SupplementId != _originalData.SupplementId;
			result = result || entityData.MedicineForId != _originalData.MedicineForId;
			result = result || entityData.PurchaseId != _originalData.PurchaseId;
			result = result || entityData.SellId != _originalData.SellId;
			result = result || entityData.OfferId != _originalData.OfferId;
			result = result || entityData.IsActive != _originalData.IsActive;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.ModifiedDate != _originalData.ModifiedDate;
			result = result || entityData.DeletedDate != _originalData.DeletedDate;
			result = result || entityData.ImageUrl != _originalData.ImageUrl;
			return result;
		}	
		
		///<summary>
		///  Returns a ProdTable Entity with the original data.
		///</summary>
		public ProdTable GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateProdTable(
				_originalData.ItemId,
				_originalData.CategoryId,
				_originalData.CompanyId,
				_originalData.TypeId,
				_originalData.SupplementId,
				_originalData.MedicineForId,
				_originalData.PurchaseId,
				_originalData.SellId,
				_originalData.OfferId,
				_originalData.IsActive,
				_originalData.CreatedDate,
				_originalData.ModifiedDate,
				_originalData.DeletedDate,
				_originalData.ImageUrl
				);
				
			return (ProdTable)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ProdTableBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ProdTableBase)
				return ValueEquals(this, (ProdTableBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ProdTableBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.ItemId == null) ? string.Empty : this.ItemId.ToString()).GetHashCode() ^ 
					((this.CategoryId == null) ? string.Empty : this.CategoryId.ToString()).GetHashCode() ^ 
					((this.CompanyId == null) ? string.Empty : this.CompanyId.ToString()).GetHashCode() ^ 
					((this.TypeId == null) ? string.Empty : this.TypeId.ToString()).GetHashCode() ^ 
					((this.SupplementId == null) ? string.Empty : this.SupplementId.ToString()).GetHashCode() ^ 
					((this.MedicineForId == null) ? string.Empty : this.MedicineForId.ToString()).GetHashCode() ^ 
					((this.PurchaseId == null) ? string.Empty : this.PurchaseId.ToString()).GetHashCode() ^ 
					((this.SellId == null) ? string.Empty : this.SellId.ToString()).GetHashCode() ^ 
					((this.OfferId == null) ? string.Empty : this.OfferId.ToString()).GetHashCode() ^ 
					((this.IsActive == null) ? string.Empty : this.IsActive.ToString()).GetHashCode() ^ 
					((this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString()).GetHashCode() ^ 
					((this.ModifiedDate == null) ? string.Empty : this.ModifiedDate.ToString()).GetHashCode() ^ 
					((this.DeletedDate == null) ? string.Empty : this.DeletedDate.ToString()).GetHashCode() ^ 
					((this.ImageUrl == null) ? string.Empty : this.ImageUrl.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ProdTableBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ProdTableBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ProdTableBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ProdTableBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ProdTableBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ProdTableBase Object1, ProdTableBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.ItemId != null && Object2.ItemId != null )
			{
				if (Object1.ItemId != Object2.ItemId)
					equal = false;
			}
			else if (Object1.ItemId == null ^ Object2.ItemId == null )
			{
				equal = false;
			}
			if ( Object1.CategoryId != null && Object2.CategoryId != null )
			{
				if (Object1.CategoryId != Object2.CategoryId)
					equal = false;
			}
			else if (Object1.CategoryId == null ^ Object2.CategoryId == null )
			{
				equal = false;
			}
			if ( Object1.CompanyId != null && Object2.CompanyId != null )
			{
				if (Object1.CompanyId != Object2.CompanyId)
					equal = false;
			}
			else if (Object1.CompanyId == null ^ Object2.CompanyId == null )
			{
				equal = false;
			}
			if ( Object1.TypeId != null && Object2.TypeId != null )
			{
				if (Object1.TypeId != Object2.TypeId)
					equal = false;
			}
			else if (Object1.TypeId == null ^ Object2.TypeId == null )
			{
				equal = false;
			}
			if ( Object1.SupplementId != null && Object2.SupplementId != null )
			{
				if (Object1.SupplementId != Object2.SupplementId)
					equal = false;
			}
			else if (Object1.SupplementId == null ^ Object2.SupplementId == null )
			{
				equal = false;
			}
			if ( Object1.MedicineForId != null && Object2.MedicineForId != null )
			{
				if (Object1.MedicineForId != Object2.MedicineForId)
					equal = false;
			}
			else if (Object1.MedicineForId == null ^ Object2.MedicineForId == null )
			{
				equal = false;
			}
			if ( Object1.PurchaseId != null && Object2.PurchaseId != null )
			{
				if (Object1.PurchaseId != Object2.PurchaseId)
					equal = false;
			}
			else if (Object1.PurchaseId == null ^ Object2.PurchaseId == null )
			{
				equal = false;
			}
			if ( Object1.SellId != null && Object2.SellId != null )
			{
				if (Object1.SellId != Object2.SellId)
					equal = false;
			}
			else if (Object1.SellId == null ^ Object2.SellId == null )
			{
				equal = false;
			}
			if ( Object1.OfferId != null && Object2.OfferId != null )
			{
				if (Object1.OfferId != Object2.OfferId)
					equal = false;
			}
			else if (Object1.OfferId == null ^ Object2.OfferId == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.CreatedDate != null && Object2.CreatedDate != null )
			{
				if (Object1.CreatedDate != Object2.CreatedDate)
					equal = false;
			}
			else if (Object1.CreatedDate == null ^ Object2.CreatedDate == null )
			{
				equal = false;
			}
			if ( Object1.ModifiedDate != null && Object2.ModifiedDate != null )
			{
				if (Object1.ModifiedDate != Object2.ModifiedDate)
					equal = false;
			}
			else if (Object1.ModifiedDate == null ^ Object2.ModifiedDate == null )
			{
				equal = false;
			}
			if ( Object1.DeletedDate != null && Object2.DeletedDate != null )
			{
				if (Object1.DeletedDate != Object2.DeletedDate)
					equal = false;
			}
			else if (Object1.DeletedDate == null ^ Object2.DeletedDate == null )
			{
				equal = false;
			}
			if ( Object1.ImageUrl != null && Object2.ImageUrl != null )
			{
				if (Object1.ImageUrl != Object2.ImageUrl)
					equal = false;
			}
			else if (Object1.ImageUrl == null ^ Object2.ImageUrl == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ProdTableBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ProdTableComparer GetComparer()
        {
            return new ProdTableComparer();
        }
        */

        // Comparer delegates back to ProdTable
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ProdTable rhs, ProdTableColumn which)
        {
            switch (which)
            {
            	
            	
            	case ProdTableColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case ProdTableColumn.ItemId:
            		return this.ItemId.Value.CompareTo(rhs.ItemId.Value);
            		
            		                 
            	
            	
            	case ProdTableColumn.CategoryId:
            		return this.CategoryId.Value.CompareTo(rhs.CategoryId.Value);
            		
            		                 
            	
            	
            	case ProdTableColumn.CompanyId:
            		return this.CompanyId.Value.CompareTo(rhs.CompanyId.Value);
            		
            		                 
            	
            	
            	case ProdTableColumn.TypeId:
            		return this.TypeId.Value.CompareTo(rhs.TypeId.Value);
            		
            		                 
            	
            	
            	case ProdTableColumn.SupplementId:
            		return this.SupplementId.Value.CompareTo(rhs.SupplementId.Value);
            		
            		                 
            	
            	
            	case ProdTableColumn.MedicineForId:
            		return this.MedicineForId.Value.CompareTo(rhs.MedicineForId.Value);
            		
            		                 
            	
            	
            	case ProdTableColumn.PurchaseId:
            		return this.PurchaseId.Value.CompareTo(rhs.PurchaseId.Value);
            		
            		                 
            	
            	
            	case ProdTableColumn.SellId:
            		return this.SellId.Value.CompareTo(rhs.SellId.Value);
            		
            		                 
            	
            	
            	case ProdTableColumn.OfferId:
            		return this.OfferId.Value.CompareTo(rhs.OfferId.Value);
            		
            		                 
            	
            	
            	case ProdTableColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case ProdTableColumn.CreatedDate:
            		return this.CreatedDate.Value.CompareTo(rhs.CreatedDate.Value);
            		
            		                 
            	
            	
            	case ProdTableColumn.ModifiedDate:
            		return this.ModifiedDate.Value.CompareTo(rhs.ModifiedDate.Value);
            		
            		                 
            	
            	
            	case ProdTableColumn.DeletedDate:
            		return this.DeletedDate.Value.CompareTo(rhs.DeletedDate.Value);
            		
            		                 
            	
            	
            	case ProdTableColumn.ImageUrl:
            		return this.ImageUrl.CompareTo(rhs.ImageUrl);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ProdTableKey> Members
		
		// member variable for the EntityId property
		private ProdTableKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ProdTableKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ProdTableKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ProdTable")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- Id: {0}{15}- ItemId: {1}{15}- CategoryId: {2}{15}- CompanyId: {3}{15}- TypeId: {4}{15}- SupplementId: {5}{15}- MedicineForId: {6}{15}- PurchaseId: {7}{15}- SellId: {8}{15}- OfferId: {9}{15}- IsActive: {10}{15}- CreatedDate: {11}{15}- ModifiedDate: {12}{15}- DeletedDate: {13}{15}- ImageUrl: {14}{15}{17}", 
				this.Id,
				(this.ItemId == null) ? string.Empty : this.ItemId.ToString(),
				(this.CategoryId == null) ? string.Empty : this.CategoryId.ToString(),
				(this.CompanyId == null) ? string.Empty : this.CompanyId.ToString(),
				(this.TypeId == null) ? string.Empty : this.TypeId.ToString(),
				(this.SupplementId == null) ? string.Empty : this.SupplementId.ToString(),
				(this.MedicineForId == null) ? string.Empty : this.MedicineForId.ToString(),
				(this.PurchaseId == null) ? string.Empty : this.PurchaseId.ToString(),
				(this.SellId == null) ? string.Empty : this.SellId.ToString(),
				(this.OfferId == null) ? string.Empty : this.OfferId.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString(),
				(this.ModifiedDate == null) ? string.Empty : this.ModifiedDate.ToString(),
				(this.DeletedDate == null) ? string.Empty : this.DeletedDate.ToString(),
				(this.ImageUrl == null) ? string.Empty : this.ImageUrl.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ProdTable' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ProdTableEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ProdTable"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// ItemID : 
		/// </summary>
		public System.Int32? ItemId = null;
		
		/// <summary>
		/// CategoryID : 
		/// </summary>
		public System.Int32? CategoryId = null;
		
		/// <summary>
		/// CompanyID : 
		/// </summary>
		public System.Int32? CompanyId = null;
		
		/// <summary>
		/// TypeID : 
		/// </summary>
		public System.Int32? TypeId = null;
		
		/// <summary>
		/// SupplementID : 
		/// </summary>
		public System.Int32? SupplementId = null;
		
		/// <summary>
		/// MedicineForID : 
		/// </summary>
		public System.Int32? MedicineForId = null;
		
		/// <summary>
		/// PurchaseID : 
		/// </summary>
		public System.Int32? PurchaseId = null;
		
		/// <summary>
		/// SellID : 
		/// </summary>
		public System.Int32? SellId = null;
		
		/// <summary>
		/// OfferID : 
		/// </summary>
		public System.Int32? OfferId = null;
		
		/// <summary>
		/// IsActive : 
		/// </summary>
		public System.Boolean? IsActive = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime? CreatedDate = null;
		
		/// <summary>
		/// ModifiedDate : 
		/// </summary>
		public System.DateTime? ModifiedDate = null;
		
		/// <summary>
		/// DeletedDate : 
		/// </summary>
		public System.DateTime? DeletedDate = null;
		
		/// <summary>
		/// ImageUrl : 
		/// </summary>
		public System.String ImageUrl = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private ItemPurchase _purchaseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ItemPurchase"/>.
		/// </summary>
		/// <value>The source ItemPurchase for PurchaseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ItemPurchase PurchaseIdSource
      	{
            get { return this._purchaseIdSource; }
            set { this._purchaseIdSource = value; }
      	}
		private Items _itemIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Items"/>.
		/// </summary>
		/// <value>The source Items for ItemId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Items ItemIdSource
      	{
            get { return this._itemIdSource; }
            set { this._itemIdSource = value; }
      	}
		private ItemSell _sellIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ItemSell"/>.
		/// </summary>
		/// <value>The source ItemSell for SellId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ItemSell SellIdSource
      	{
            get { return this._sellIdSource; }
            set { this._sellIdSource = value; }
      	}
		private ProdCompany _companyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ProdCompany"/>.
		/// </summary>
		/// <value>The source ProdCompany for CompanyId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ProdCompany CompanyIdSource
      	{
            get { return this._companyIdSource; }
            set { this._companyIdSource = value; }
      	}
		private ProdMedicineFor _medicineForIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ProdMedicineFor"/>.
		/// </summary>
		/// <value>The source ProdMedicineFor for MedicineForId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ProdMedicineFor MedicineForIdSource
      	{
            get { return this._medicineForIdSource; }
            set { this._medicineForIdSource = value; }
      	}
		private ProdSubcategory _categoryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ProdSubcategory"/>.
		/// </summary>
		/// <value>The source ProdSubcategory for CategoryId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ProdSubcategory CategoryIdSource
      	{
            get { return this._categoryIdSource; }
            set { this._categoryIdSource = value; }
      	}
		private ProdSupplymentType _supplementIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ProdSupplymentType"/>.
		/// </summary>
		/// <value>The source ProdSupplymentType for SupplementId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ProdSupplymentType SupplementIdSource
      	{
            get { return this._supplementIdSource; }
            set { this._supplementIdSource = value; }
      	}
		private ProdType _typeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ProdType"/>.
		/// </summary>
		/// <value>The source ProdType for TypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ProdType TypeIdSource
      	{
            get { return this._typeIdSource; }
            set { this._typeIdSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ProdTableEntityData _tmp = new ProdTableEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.ItemId = this.ItemId;
			_tmp.CategoryId = this.CategoryId;
			_tmp.CompanyId = this.CompanyId;
			_tmp.TypeId = this.TypeId;
			_tmp.SupplementId = this.SupplementId;
			_tmp.MedicineForId = this.MedicineForId;
			_tmp.PurchaseId = this.PurchaseId;
			_tmp.SellId = this.SellId;
			_tmp.OfferId = this.OfferId;
			_tmp.IsActive = this.IsActive;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.ModifiedDate = this.ModifiedDate;
			_tmp.DeletedDate = this.DeletedDate;
			_tmp.ImageUrl = this.ImageUrl;
			
			#region Source Parent Composite Entities
			if (this.PurchaseIdSource != null)
				_tmp.PurchaseIdSource = MakeCopyOf(this.PurchaseIdSource) as ItemPurchase;
			if (this.ItemIdSource != null)
				_tmp.ItemIdSource = MakeCopyOf(this.ItemIdSource) as Items;
			if (this.SellIdSource != null)
				_tmp.SellIdSource = MakeCopyOf(this.SellIdSource) as ItemSell;
			if (this.CompanyIdSource != null)
				_tmp.CompanyIdSource = MakeCopyOf(this.CompanyIdSource) as ProdCompany;
			if (this.MedicineForIdSource != null)
				_tmp.MedicineForIdSource = MakeCopyOf(this.MedicineForIdSource) as ProdMedicineFor;
			if (this.CategoryIdSource != null)
				_tmp.CategoryIdSource = MakeCopyOf(this.CategoryIdSource) as ProdSubcategory;
			if (this.SupplementIdSource != null)
				_tmp.SupplementIdSource = MakeCopyOf(this.SupplementIdSource) as ProdSupplymentType;
			if (this.TypeIdSource != null)
				_tmp.TypeIdSource = MakeCopyOf(this.TypeIdSource) as ProdType;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ProdTableEntityData _tmp = new ProdTableEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.ItemId = this.ItemId;
			_tmp.CategoryId = this.CategoryId;
			_tmp.CompanyId = this.CompanyId;
			_tmp.TypeId = this.TypeId;
			_tmp.SupplementId = this.SupplementId;
			_tmp.MedicineForId = this.MedicineForId;
			_tmp.PurchaseId = this.PurchaseId;
			_tmp.SellId = this.SellId;
			_tmp.OfferId = this.OfferId;
			_tmp.IsActive = this.IsActive;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.ModifiedDate = this.ModifiedDate;
			_tmp.DeletedDate = this.DeletedDate;
			_tmp.ImageUrl = this.ImageUrl;
			
			#region Source Parent Composite Entities
			if (this.PurchaseIdSource != null && existingCopies.Contains(this.PurchaseIdSource))
				_tmp.PurchaseIdSource = existingCopies[this.PurchaseIdSource] as ItemPurchase;
			else
				_tmp.PurchaseIdSource = MakeCopyOf(this.PurchaseIdSource, existingCopies) as ItemPurchase;
			if (this.ItemIdSource != null && existingCopies.Contains(this.ItemIdSource))
				_tmp.ItemIdSource = existingCopies[this.ItemIdSource] as Items;
			else
				_tmp.ItemIdSource = MakeCopyOf(this.ItemIdSource, existingCopies) as Items;
			if (this.SellIdSource != null && existingCopies.Contains(this.SellIdSource))
				_tmp.SellIdSource = existingCopies[this.SellIdSource] as ItemSell;
			else
				_tmp.SellIdSource = MakeCopyOf(this.SellIdSource, existingCopies) as ItemSell;
			if (this.CompanyIdSource != null && existingCopies.Contains(this.CompanyIdSource))
				_tmp.CompanyIdSource = existingCopies[this.CompanyIdSource] as ProdCompany;
			else
				_tmp.CompanyIdSource = MakeCopyOf(this.CompanyIdSource, existingCopies) as ProdCompany;
			if (this.MedicineForIdSource != null && existingCopies.Contains(this.MedicineForIdSource))
				_tmp.MedicineForIdSource = existingCopies[this.MedicineForIdSource] as ProdMedicineFor;
			else
				_tmp.MedicineForIdSource = MakeCopyOf(this.MedicineForIdSource, existingCopies) as ProdMedicineFor;
			if (this.CategoryIdSource != null && existingCopies.Contains(this.CategoryIdSource))
				_tmp.CategoryIdSource = existingCopies[this.CategoryIdSource] as ProdSubcategory;
			else
				_tmp.CategoryIdSource = MakeCopyOf(this.CategoryIdSource, existingCopies) as ProdSubcategory;
			if (this.SupplementIdSource != null && existingCopies.Contains(this.SupplementIdSource))
				_tmp.SupplementIdSource = existingCopies[this.SupplementIdSource] as ProdSupplymentType;
			else
				_tmp.SupplementIdSource = MakeCopyOf(this.SupplementIdSource, existingCopies) as ProdSupplymentType;
			if (this.TypeIdSource != null && existingCopies.Contains(this.TypeIdSource))
				_tmp.TypeIdSource = existingCopies[this.TypeIdSource] as ProdType;
			else
				_tmp.TypeIdSource = MakeCopyOf(this.TypeIdSource, existingCopies) as ProdType;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProdTableColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ProdTableColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProdTableColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ProdTableColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProdTableColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ProdTableColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ProdTableEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ProdTableEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProdTableColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ProdTableColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ProdTableEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ProdTableEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ProdTableEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ProdTable"/> object.
	/// </remarks>
	public class ProdTableEventArgs : System.EventArgs
	{
		private ProdTableColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ProdTableEventArgs class.
		///</summary>
		public ProdTableEventArgs(ProdTableColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ProdTableEventArgs class.
		///</summary>
		public ProdTableEventArgs(ProdTableColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ProdTableColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ProdTableColumn" />
		public ProdTableColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ProdTable related events.
	///</summary>
	public delegate void ProdTableEventHandler(object sender, ProdTableEventArgs e);
	
	#region ProdTableComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ProdTableComparer : System.Collections.Generic.IComparer<ProdTable>
	{
		ProdTableColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ProdTableComparer"/> class.
        /// </summary>
		public ProdTableComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ProdTableComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ProdTableComparer(ProdTableColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ProdTable"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ProdTable"/> to compare.</param>
        /// <param name="b">The second <c>ProdTable</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ProdTable a, ProdTable b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ProdTable entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ProdTable a, ProdTable b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ProdTableColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ProdTableKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ProdTable"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ProdTableKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ProdTableKey class.
		/// </summary>
		public ProdTableKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ProdTableKey class.
		/// </summary>
		public ProdTableKey(ProdTableBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ProdTableKey class.
		/// </summary>
		public ProdTableKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ProdTableBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ProdTableBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ProdTableColumn Enum
	
	/// <summary>
	/// Enumerate the ProdTable columns.
	/// </summary>
	[Serializable]
	public enum ProdTableColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// ItemId : 
		/// </summary>
		[EnumTextValue("Item Id")]
		[ColumnEnum("ItemID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ItemId = 2,
		/// <summary>
		/// CategoryId : 
		/// </summary>
		[EnumTextValue("Category Id")]
		[ColumnEnum("CategoryID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CategoryId = 3,
		/// <summary>
		/// CompanyId : 
		/// </summary>
		[EnumTextValue("Company Id")]
		[ColumnEnum("CompanyID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CompanyId = 4,
		/// <summary>
		/// TypeId : 
		/// </summary>
		[EnumTextValue("Type Id")]
		[ColumnEnum("TypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TypeId = 5,
		/// <summary>
		/// SupplementId : 
		/// </summary>
		[EnumTextValue("Supplement Id")]
		[ColumnEnum("SupplementID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SupplementId = 6,
		/// <summary>
		/// MedicineForId : 
		/// </summary>
		[EnumTextValue("Medicine For Id")]
		[ColumnEnum("MedicineForID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MedicineForId = 7,
		/// <summary>
		/// PurchaseId : 
		/// </summary>
		[EnumTextValue("Purchase Id")]
		[ColumnEnum("PurchaseID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PurchaseId = 8,
		/// <summary>
		/// SellId : 
		/// </summary>
		[EnumTextValue("Sell Id")]
		[ColumnEnum("SellID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SellId = 9,
		/// <summary>
		/// OfferId : 
		/// </summary>
		[EnumTextValue("Offer Id")]
		[ColumnEnum("OfferID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		OfferId = 10,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("Is Active")]
		[ColumnEnum("IsActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 11,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("Created Date")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedDate = 12,
		/// <summary>
		/// ModifiedDate : 
		/// </summary>
		[EnumTextValue("Modified Date")]
		[ColumnEnum("ModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ModifiedDate = 13,
		/// <summary>
		/// DeletedDate : 
		/// </summary>
		[EnumTextValue("Deleted Date")]
		[ColumnEnum("DeletedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DeletedDate = 14,
		/// <summary>
		/// ImageUrl : 
		/// </summary>
		[EnumTextValue("Image Url")]
		[ColumnEnum("ImageUrl", typeof(System.String), System.Data.DbType.String, false, false, true)]
		ImageUrl = 15
	}//End enum

	#endregion ProdTableColumn Enum

} // end namespace


/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Orders.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using HearbalKartDB.Entities.Validation;
#endregion

namespace HearbalKartDB.Entities
{
	///<summary>
	/// An object representation of the 'Orders' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class OrdersBase : EntityBase, IOrders, IEntityId<OrdersKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private OrdersEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private OrdersEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private OrdersEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Orders> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event OrdersEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event OrdersEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="OrdersBase"/> instance.
		///</summary>
		public OrdersBase()
		{
			this.entityData = new OrdersEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="OrdersBase"/> instance.
		///</summary>
		///<param name="_customerId"></param>
		///<param name="_orderStatusId"></param>
		///<param name="_billingId"></param>
		///<param name="_totalAmount"></param>
		///<param name="_surveyId"></param>
		///<param name="_isActive"></param>
		///<param name="_isDeliver"></param>
		///<param name="_isSurveyDone"></param>
		///<param name="_bookingDate"></param>
		///<param name="_createdDate"></param>
		///<param name="_modifiedDate"></param>
		///<param name="_deletedDate"></param>
		public OrdersBase(System.Int32? _customerId, System.Int32? _orderStatusId, System.Int32? _billingId, 
			System.Int64? _totalAmount, System.Int32? _surveyId, System.Boolean? _isActive, System.Boolean? _isDeliver, 
			System.Boolean? _isSurveyDone, System.DateTime? _bookingDate, System.DateTime? _createdDate, System.DateTime? _modifiedDate, 
			System.DateTime? _deletedDate)
		{
			this.entityData = new OrdersEntityData();
			this.backupData = null;

			this.CustomerId = _customerId;
			this.OrderStatusId = _orderStatusId;
			this.BillingId = _billingId;
			this.TotalAmount = _totalAmount;
			this.SurveyId = _surveyId;
			this.IsActive = _isActive;
			this.IsDeliver = _isDeliver;
			this.IsSurveyDone = _isSurveyDone;
			this.BookingDate = _bookingDate;
			this.CreatedDate = _createdDate;
			this.ModifiedDate = _modifiedDate;
			this.DeletedDate = _deletedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Orders"/> instance.
		///</summary>
		///<param name="_customerId"></param>
		///<param name="_orderStatusId"></param>
		///<param name="_billingId"></param>
		///<param name="_totalAmount"></param>
		///<param name="_surveyId"></param>
		///<param name="_isActive"></param>
		///<param name="_isDeliver"></param>
		///<param name="_isSurveyDone"></param>
		///<param name="_bookingDate"></param>
		///<param name="_createdDate"></param>
		///<param name="_modifiedDate"></param>
		///<param name="_deletedDate"></param>
		public static Orders CreateOrders(System.Int32? _customerId, System.Int32? _orderStatusId, System.Int32? _billingId, 
			System.Int64? _totalAmount, System.Int32? _surveyId, System.Boolean? _isActive, System.Boolean? _isDeliver, 
			System.Boolean? _isSurveyDone, System.DateTime? _bookingDate, System.DateTime? _createdDate, System.DateTime? _modifiedDate, 
			System.DateTime? _deletedDate)
		{
			Orders newOrders = new Orders();
			newOrders.CustomerId = _customerId;
			newOrders.OrderStatusId = _orderStatusId;
			newOrders.BillingId = _billingId;
			newOrders.TotalAmount = _totalAmount;
			newOrders.SurveyId = _surveyId;
			newOrders.IsActive = _isActive;
			newOrders.IsDeliver = _isDeliver;
			newOrders.IsSurveyDone = _isSurveyDone;
			newOrders.BookingDate = _bookingDate;
			newOrders.CreatedDate = _createdDate;
			newOrders.ModifiedDate = _modifiedDate;
			newOrders.DeletedDate = _deletedDate;
			return newOrders;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Id is required")]




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(OrdersColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CustomerId
		{
			get
			{
				return this.entityData.CustomerId; 
			}
			
			set
			{
				if (this.entityData.CustomerId == value)
					return;
				
                OnPropertyChanging("CustomerId");                    
				OnColumnChanging(OrdersColumn.CustomerId, this.entityData.CustomerId);
				this.entityData.CustomerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.CustomerId, this.entityData.CustomerId);
				OnPropertyChanged("CustomerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrderStatusId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? OrderStatusId
		{
			get
			{
				return this.entityData.OrderStatusId; 
			}
			
			set
			{
				if (this.entityData.OrderStatusId == value)
					return;
				
                OnPropertyChanging("OrderStatusId");                    
				OnColumnChanging(OrdersColumn.OrderStatusId, this.entityData.OrderStatusId);
				this.entityData.OrderStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.OrderStatusId, this.entityData.OrderStatusId);
				OnPropertyChanged("OrderStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? BillingId
		{
			get
			{
				return this.entityData.BillingId; 
			}
			
			set
			{
				if (this.entityData.BillingId == value)
					return;
				
                OnPropertyChanging("BillingId");                    
				OnColumnChanging(OrdersColumn.BillingId, this.entityData.BillingId);
				this.entityData.BillingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.BillingId, this.entityData.BillingId);
				OnPropertyChanged("BillingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalAmount property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? TotalAmount
		{
			get
			{
				return this.entityData.TotalAmount; 
			}
			
			set
			{
				if (this.entityData.TotalAmount == value)
					return;
				
                OnPropertyChanging("TotalAmount");                    
				OnColumnChanging(OrdersColumn.TotalAmount, this.entityData.TotalAmount);
				this.entityData.TotalAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.TotalAmount, this.entityData.TotalAmount);
				OnPropertyChanged("TotalAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SurveyId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SurveyId
		{
			get
			{
				return this.entityData.SurveyId; 
			}
			
			set
			{
				if (this.entityData.SurveyId == value)
					return;
				
                OnPropertyChanging("SurveyId");                    
				OnColumnChanging(OrdersColumn.SurveyId, this.entityData.SurveyId);
				this.entityData.SurveyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.SurveyId, this.entityData.SurveyId);
				OnPropertyChanged("SurveyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
				
                OnPropertyChanging("IsActive");                    
				OnColumnChanging(OrdersColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsDeliver property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsDeliver
		{
			get
			{
				return this.entityData.IsDeliver; 
			}
			
			set
			{
				if (this.entityData.IsDeliver == value)
					return;
				
                OnPropertyChanging("IsDeliver");                    
				OnColumnChanging(OrdersColumn.IsDeliver, this.entityData.IsDeliver);
				this.entityData.IsDeliver = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.IsDeliver, this.entityData.IsDeliver);
				OnPropertyChanged("IsDeliver");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsSurveyDone property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsSurveyDone
		{
			get
			{
				return this.entityData.IsSurveyDone; 
			}
			
			set
			{
				if (this.entityData.IsSurveyDone == value)
					return;
				
                OnPropertyChanging("IsSurveyDone");                    
				OnColumnChanging(OrdersColumn.IsSurveyDone, this.entityData.IsSurveyDone);
				this.entityData.IsSurveyDone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.IsSurveyDone, this.entityData.IsSurveyDone);
				OnPropertyChanged("IsSurveyDone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BookingDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? BookingDate
		{
			get
			{
				return this.entityData.BookingDate; 
			}
			
			set
			{
				if (this.entityData.BookingDate == value)
					return;
				
                OnPropertyChanging("BookingDate");                    
				OnColumnChanging(OrdersColumn.BookingDate, this.entityData.BookingDate);
				this.entityData.BookingDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.BookingDate, this.entityData.BookingDate);
				OnPropertyChanged("BookingDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
				
                OnPropertyChanging("CreatedDate");                    
				OnColumnChanging(OrdersColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ModifiedDate
		{
			get
			{
				return this.entityData.ModifiedDate; 
			}
			
			set
			{
				if (this.entityData.ModifiedDate == value)
					return;
				
                OnPropertyChanging("ModifiedDate");                    
				OnColumnChanging(OrdersColumn.ModifiedDate, this.entityData.ModifiedDate);
				this.entityData.ModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.ModifiedDate, this.entityData.ModifiedDate);
				OnPropertyChanged("ModifiedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeletedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DeletedDate
		{
			get
			{
				return this.entityData.DeletedDate; 
			}
			
			set
			{
				if (this.entityData.DeletedDate == value)
					return;
				
                OnPropertyChanging("DeletedDate");                    
				OnColumnChanging(OrdersColumn.DeletedDate, this.entityData.DeletedDate);
				this.entityData.DeletedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.DeletedDate, this.entityData.DeletedDate);
				OnPropertyChanged("DeletedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="CustomerBilling"/>.
		/// </summary>
		/// <value>The source CustomerBilling for BillingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual CustomerBilling BillingIdSource
      	{
            get { return entityData.BillingIdSource; }
            set { entityData.BillingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Customers"/>.
		/// </summary>
		/// <value>The source Customers for CustomerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Customers CustomerIdSource
      	{
            get { return entityData.CustomerIdSource; }
            set { entityData.CustomerIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="OrderStatus"/>.
		/// </summary>
		/// <value>The source OrderStatus for OrderStatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual OrderStatus OrderStatusIdSource
      	{
            get { return entityData.OrderStatusIdSource; }
            set { entityData.OrderStatusIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of CustomerBilling objects
		///	which are related to this object through the relation FK_CustomerBilling_Orders
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CustomerBilling> CustomerBillingCollection
		{
			get { return entityData.CustomerBillingCollection; }
			set { entityData.CustomerBillingCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of OrderDetails objects
		///	which are related to this object through the relation FK_OrderDetails_Orders
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<OrderDetails> OrderDetailsCollection
		{
			get { return entityData.OrderDetailsCollection; }
			set { entityData.OrderDetailsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of DistributorsOrders objects
		///	which are related to this object through the relation FK_DistributorsOrders_Orders
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DistributorsOrders> DistributorsOrdersCollection
		{
			get { return entityData.DistributorsOrdersCollection; }
			set { entityData.DistributorsOrdersCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Orders"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "CustomerID", "OrderStatusID", "BillingID", "TotalAmount", "SurveyID", "ISActive", "ISDeliver", "IsSurveyDone", "BookingDate", "CreatedDate", "ModifiedDate", "DeletedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as OrdersEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Orders) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Orders>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Orders);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Orders Entity 
		///</summary>
		protected virtual Orders Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Orders copy = new Orders();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.CustomerId = this.CustomerId;
				copy.OrderStatusId = this.OrderStatusId;
				copy.BillingId = this.BillingId;
				copy.TotalAmount = this.TotalAmount;
				copy.SurveyId = this.SurveyId;
				copy.IsActive = this.IsActive;
				copy.IsDeliver = this.IsDeliver;
				copy.IsSurveyDone = this.IsSurveyDone;
				copy.BookingDate = this.BookingDate;
				copy.CreatedDate = this.CreatedDate;
				copy.ModifiedDate = this.ModifiedDate;
				copy.DeletedDate = this.DeletedDate;
			
			if (this.BillingIdSource != null && existingCopies.Contains(this.BillingIdSource))
				copy.BillingIdSource = existingCopies[this.BillingIdSource] as CustomerBilling;
			else
				copy.BillingIdSource = MakeCopyOf(this.BillingIdSource, existingCopies) as CustomerBilling;
			if (this.CustomerIdSource != null && existingCopies.Contains(this.CustomerIdSource))
				copy.CustomerIdSource = existingCopies[this.CustomerIdSource] as Customers;
			else
				copy.CustomerIdSource = MakeCopyOf(this.CustomerIdSource, existingCopies) as Customers;
			if (this.OrderStatusIdSource != null && existingCopies.Contains(this.OrderStatusIdSource))
				copy.OrderStatusIdSource = existingCopies[this.OrderStatusIdSource] as OrderStatus;
			else
				copy.OrderStatusIdSource = MakeCopyOf(this.OrderStatusIdSource, existingCopies) as OrderStatus;
		
			//deep copy nested objects
			copy.CustomerBillingCollection = (TList<CustomerBilling>) MakeCopyOf(this.CustomerBillingCollection, existingCopies); 
			copy.OrderDetailsCollection = (TList<OrderDetails>) MakeCopyOf(this.OrderDetailsCollection, existingCopies); 
			copy.DistributorsOrdersCollection = (TList<DistributorsOrders>) MakeCopyOf(this.DistributorsOrdersCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Orders Entity 
		///</summary>
		public virtual Orders Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Orders Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Orders DeepCopy()
		{
			return EntityHelper.Clone<Orders>(this as Orders);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as OrdersEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new OrdersEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as OrdersEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(OrdersColumn column)
		{
			switch(column)
			{
					case OrdersColumn.Id:
					return entityData.Id != _originalData.Id;
					case OrdersColumn.CustomerId:
					return entityData.CustomerId != _originalData.CustomerId;
					case OrdersColumn.OrderStatusId:
					return entityData.OrderStatusId != _originalData.OrderStatusId;
					case OrdersColumn.BillingId:
					return entityData.BillingId != _originalData.BillingId;
					case OrdersColumn.TotalAmount:
					return entityData.TotalAmount != _originalData.TotalAmount;
					case OrdersColumn.SurveyId:
					return entityData.SurveyId != _originalData.SurveyId;
					case OrdersColumn.IsActive:
					return entityData.IsActive != _originalData.IsActive;
					case OrdersColumn.IsDeliver:
					return entityData.IsDeliver != _originalData.IsDeliver;
					case OrdersColumn.IsSurveyDone:
					return entityData.IsSurveyDone != _originalData.IsSurveyDone;
					case OrdersColumn.BookingDate:
					return entityData.BookingDate != _originalData.BookingDate;
					case OrdersColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case OrdersColumn.ModifiedDate:
					return entityData.ModifiedDate != _originalData.ModifiedDate;
					case OrdersColumn.DeletedDate:
					return entityData.DeletedDate != _originalData.DeletedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< OrdersColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.CustomerId != _originalData.CustomerId;
			result = result || entityData.OrderStatusId != _originalData.OrderStatusId;
			result = result || entityData.BillingId != _originalData.BillingId;
			result = result || entityData.TotalAmount != _originalData.TotalAmount;
			result = result || entityData.SurveyId != _originalData.SurveyId;
			result = result || entityData.IsActive != _originalData.IsActive;
			result = result || entityData.IsDeliver != _originalData.IsDeliver;
			result = result || entityData.IsSurveyDone != _originalData.IsSurveyDone;
			result = result || entityData.BookingDate != _originalData.BookingDate;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.ModifiedDate != _originalData.ModifiedDate;
			result = result || entityData.DeletedDate != _originalData.DeletedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a Orders Entity with the original data.
		///</summary>
		public Orders GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateOrders(
				_originalData.CustomerId,
				_originalData.OrderStatusId,
				_originalData.BillingId,
				_originalData.TotalAmount,
				_originalData.SurveyId,
				_originalData.IsActive,
				_originalData.IsDeliver,
				_originalData.IsSurveyDone,
				_originalData.BookingDate,
				_originalData.CreatedDate,
				_originalData.ModifiedDate,
				_originalData.DeletedDate
				);
				
			return (Orders)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="OrdersBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is OrdersBase)
				return ValueEquals(this, (OrdersBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="OrdersBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.CustomerId == null) ? string.Empty : this.CustomerId.ToString()).GetHashCode() ^ 
					((this.OrderStatusId == null) ? string.Empty : this.OrderStatusId.ToString()).GetHashCode() ^ 
					((this.BillingId == null) ? string.Empty : this.BillingId.ToString()).GetHashCode() ^ 
					((this.TotalAmount == null) ? string.Empty : this.TotalAmount.ToString()).GetHashCode() ^ 
					((this.SurveyId == null) ? string.Empty : this.SurveyId.ToString()).GetHashCode() ^ 
					((this.IsActive == null) ? string.Empty : this.IsActive.ToString()).GetHashCode() ^ 
					((this.IsDeliver == null) ? string.Empty : this.IsDeliver.ToString()).GetHashCode() ^ 
					((this.IsSurveyDone == null) ? string.Empty : this.IsSurveyDone.ToString()).GetHashCode() ^ 
					((this.BookingDate == null) ? string.Empty : this.BookingDate.ToString()).GetHashCode() ^ 
					((this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString()).GetHashCode() ^ 
					((this.ModifiedDate == null) ? string.Empty : this.ModifiedDate.ToString()).GetHashCode() ^ 
					((this.DeletedDate == null) ? string.Empty : this.DeletedDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="OrdersBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(OrdersBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="OrdersBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="OrdersBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="OrdersBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(OrdersBase Object1, OrdersBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.CustomerId != null && Object2.CustomerId != null )
			{
				if (Object1.CustomerId != Object2.CustomerId)
					equal = false;
			}
			else if (Object1.CustomerId == null ^ Object2.CustomerId == null )
			{
				equal = false;
			}
			if ( Object1.OrderStatusId != null && Object2.OrderStatusId != null )
			{
				if (Object1.OrderStatusId != Object2.OrderStatusId)
					equal = false;
			}
			else if (Object1.OrderStatusId == null ^ Object2.OrderStatusId == null )
			{
				equal = false;
			}
			if ( Object1.BillingId != null && Object2.BillingId != null )
			{
				if (Object1.BillingId != Object2.BillingId)
					equal = false;
			}
			else if (Object1.BillingId == null ^ Object2.BillingId == null )
			{
				equal = false;
			}
			if ( Object1.TotalAmount != null && Object2.TotalAmount != null )
			{
				if (Object1.TotalAmount != Object2.TotalAmount)
					equal = false;
			}
			else if (Object1.TotalAmount == null ^ Object2.TotalAmount == null )
			{
				equal = false;
			}
			if ( Object1.SurveyId != null && Object2.SurveyId != null )
			{
				if (Object1.SurveyId != Object2.SurveyId)
					equal = false;
			}
			else if (Object1.SurveyId == null ^ Object2.SurveyId == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.IsDeliver != null && Object2.IsDeliver != null )
			{
				if (Object1.IsDeliver != Object2.IsDeliver)
					equal = false;
			}
			else if (Object1.IsDeliver == null ^ Object2.IsDeliver == null )
			{
				equal = false;
			}
			if ( Object1.IsSurveyDone != null && Object2.IsSurveyDone != null )
			{
				if (Object1.IsSurveyDone != Object2.IsSurveyDone)
					equal = false;
			}
			else if (Object1.IsSurveyDone == null ^ Object2.IsSurveyDone == null )
			{
				equal = false;
			}
			if ( Object1.BookingDate != null && Object2.BookingDate != null )
			{
				if (Object1.BookingDate != Object2.BookingDate)
					equal = false;
			}
			else if (Object1.BookingDate == null ^ Object2.BookingDate == null )
			{
				equal = false;
			}
			if ( Object1.CreatedDate != null && Object2.CreatedDate != null )
			{
				if (Object1.CreatedDate != Object2.CreatedDate)
					equal = false;
			}
			else if (Object1.CreatedDate == null ^ Object2.CreatedDate == null )
			{
				equal = false;
			}
			if ( Object1.ModifiedDate != null && Object2.ModifiedDate != null )
			{
				if (Object1.ModifiedDate != Object2.ModifiedDate)
					equal = false;
			}
			else if (Object1.ModifiedDate == null ^ Object2.ModifiedDate == null )
			{
				equal = false;
			}
			if ( Object1.DeletedDate != null && Object2.DeletedDate != null )
			{
				if (Object1.DeletedDate != Object2.DeletedDate)
					equal = false;
			}
			else if (Object1.DeletedDate == null ^ Object2.DeletedDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((OrdersBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static OrdersComparer GetComparer()
        {
            return new OrdersComparer();
        }
        */

        // Comparer delegates back to Orders
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Orders rhs, OrdersColumn which)
        {
            switch (which)
            {
            	
            	
            	case OrdersColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case OrdersColumn.CustomerId:
            		return this.CustomerId.Value.CompareTo(rhs.CustomerId.Value);
            		
            		                 
            	
            	
            	case OrdersColumn.OrderStatusId:
            		return this.OrderStatusId.Value.CompareTo(rhs.OrderStatusId.Value);
            		
            		                 
            	
            	
            	case OrdersColumn.BillingId:
            		return this.BillingId.Value.CompareTo(rhs.BillingId.Value);
            		
            		                 
            	
            	
            	case OrdersColumn.TotalAmount:
            		return this.TotalAmount.Value.CompareTo(rhs.TotalAmount.Value);
            		
            		                 
            	
            	
            	case OrdersColumn.SurveyId:
            		return this.SurveyId.Value.CompareTo(rhs.SurveyId.Value);
            		
            		                 
            	
            	
            	case OrdersColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case OrdersColumn.IsDeliver:
            		return this.IsDeliver.Value.CompareTo(rhs.IsDeliver.Value);
            		
            		                 
            	
            	
            	case OrdersColumn.IsSurveyDone:
            		return this.IsSurveyDone.Value.CompareTo(rhs.IsSurveyDone.Value);
            		
            		                 
            	
            	
            	case OrdersColumn.BookingDate:
            		return this.BookingDate.Value.CompareTo(rhs.BookingDate.Value);
            		
            		                 
            	
            	
            	case OrdersColumn.CreatedDate:
            		return this.CreatedDate.Value.CompareTo(rhs.CreatedDate.Value);
            		
            		                 
            	
            	
            	case OrdersColumn.ModifiedDate:
            		return this.ModifiedDate.Value.CompareTo(rhs.ModifiedDate.Value);
            		
            		                 
            	
            	
            	case OrdersColumn.DeletedDate:
            		return this.DeletedDate.Value.CompareTo(rhs.DeletedDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<OrdersKey> Members
		
		// member variable for the EntityId property
		private OrdersKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual OrdersKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new OrdersKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Orders")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- Id: {0}{13}- CustomerId: {1}{13}- OrderStatusId: {2}{13}- BillingId: {3}{13}- TotalAmount: {4}{13}- SurveyId: {5}{13}- IsActive: {6}{13}- IsDeliver: {7}{13}- IsSurveyDone: {8}{13}- BookingDate: {9}{13}- CreatedDate: {10}{13}- ModifiedDate: {11}{13}- DeletedDate: {12}{13}{15}", 
				this.Id,
				(this.CustomerId == null) ? string.Empty : this.CustomerId.ToString(),
				(this.OrderStatusId == null) ? string.Empty : this.OrderStatusId.ToString(),
				(this.BillingId == null) ? string.Empty : this.BillingId.ToString(),
				(this.TotalAmount == null) ? string.Empty : this.TotalAmount.ToString(),
				(this.SurveyId == null) ? string.Empty : this.SurveyId.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.IsDeliver == null) ? string.Empty : this.IsDeliver.ToString(),
				(this.IsSurveyDone == null) ? string.Empty : this.IsSurveyDone.ToString(),
				(this.BookingDate == null) ? string.Empty : this.BookingDate.ToString(),
				(this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString(),
				(this.ModifiedDate == null) ? string.Empty : this.ModifiedDate.ToString(),
				(this.DeletedDate == null) ? string.Empty : this.DeletedDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Orders' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class OrdersEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Orders"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// CustomerID : 
		/// </summary>
		public System.Int32? CustomerId = null;
		
		/// <summary>
		/// OrderStatusID : 
		/// </summary>
		public System.Int32? OrderStatusId = null;
		
		/// <summary>
		/// BillingID : 
		/// </summary>
		public System.Int32? BillingId = null;
		
		/// <summary>
		/// TotalAmount : 
		/// </summary>
		public System.Int64? TotalAmount = null;
		
		/// <summary>
		/// SurveyID : 
		/// </summary>
		public System.Int32? SurveyId = null;
		
		/// <summary>
		/// ISActive : 
		/// </summary>
		public System.Boolean? IsActive = null;
		
		/// <summary>
		/// ISDeliver : 
		/// </summary>
		public System.Boolean? IsDeliver = null;
		
		/// <summary>
		/// IsSurveyDone : 
		/// </summary>
		public System.Boolean? IsSurveyDone = null;
		
		/// <summary>
		/// BookingDate : 
		/// </summary>
		public System.DateTime? BookingDate = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime? CreatedDate = null;
		
		/// <summary>
		/// ModifiedDate : 
		/// </summary>
		public System.DateTime? ModifiedDate = null;
		
		/// <summary>
		/// DeletedDate : 
		/// </summary>
		public System.DateTime? DeletedDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private CustomerBilling _billingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CustomerBilling"/>.
		/// </summary>
		/// <value>The source CustomerBilling for BillingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual CustomerBilling BillingIdSource
      	{
            get { return this._billingIdSource; }
            set { this._billingIdSource = value; }
      	}
		private Customers _customerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Customers"/>.
		/// </summary>
		/// <value>The source Customers for CustomerId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Customers CustomerIdSource
      	{
            get { return this._customerIdSource; }
            set { this._customerIdSource = value; }
      	}
		private OrderStatus _orderStatusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="OrderStatus"/>.
		/// </summary>
		/// <value>The source OrderStatus for OrderStatusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual OrderStatus OrderStatusIdSource
      	{
            get { return this._orderStatusIdSource; }
            set { this._orderStatusIdSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region CustomerBillingCollection
		
		private TList<CustomerBilling> _customerBillingOrderId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customerBillingOrderId
		/// </summary>
		
		public TList<CustomerBilling> CustomerBillingCollection
		{
			get
			{
				if (_customerBillingOrderId == null)
				{
				_customerBillingOrderId = new TList<CustomerBilling>();
				}
	
				return _customerBillingOrderId;
			}
			set { _customerBillingOrderId = value; }
		}
		
		#endregion

		#region OrderDetailsCollection
		
		private TList<OrderDetails> _orderDetailsOrderId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _orderDetailsOrderId
		/// </summary>
		
		public TList<OrderDetails> OrderDetailsCollection
		{
			get
			{
				if (_orderDetailsOrderId == null)
				{
				_orderDetailsOrderId = new TList<OrderDetails>();
				}
	
				return _orderDetailsOrderId;
			}
			set { _orderDetailsOrderId = value; }
		}
		
		#endregion

		#region DistributorsOrdersCollection
		
		private TList<DistributorsOrders> _distributorsOrdersOrderId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _distributorsOrdersOrderId
		/// </summary>
		
		public TList<DistributorsOrders> DistributorsOrdersCollection
		{
			get
			{
				if (_distributorsOrdersOrderId == null)
				{
				_distributorsOrdersOrderId = new TList<DistributorsOrders>();
				}
	
				return _distributorsOrdersOrderId;
			}
			set { _distributorsOrdersOrderId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			OrdersEntityData _tmp = new OrdersEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.CustomerId = this.CustomerId;
			_tmp.OrderStatusId = this.OrderStatusId;
			_tmp.BillingId = this.BillingId;
			_tmp.TotalAmount = this.TotalAmount;
			_tmp.SurveyId = this.SurveyId;
			_tmp.IsActive = this.IsActive;
			_tmp.IsDeliver = this.IsDeliver;
			_tmp.IsSurveyDone = this.IsSurveyDone;
			_tmp.BookingDate = this.BookingDate;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.ModifiedDate = this.ModifiedDate;
			_tmp.DeletedDate = this.DeletedDate;
			
			#region Source Parent Composite Entities
			if (this.BillingIdSource != null)
				_tmp.BillingIdSource = MakeCopyOf(this.BillingIdSource) as CustomerBilling;
			if (this.CustomerIdSource != null)
				_tmp.CustomerIdSource = MakeCopyOf(this.CustomerIdSource) as Customers;
			if (this.OrderStatusIdSource != null)
				_tmp.OrderStatusIdSource = MakeCopyOf(this.OrderStatusIdSource) as OrderStatus;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._customerBillingOrderId != null)
				_tmp.CustomerBillingCollection = (TList<CustomerBilling>) MakeCopyOf(this.CustomerBillingCollection); 
			if (this._orderDetailsOrderId != null)
				_tmp.OrderDetailsCollection = (TList<OrderDetails>) MakeCopyOf(this.OrderDetailsCollection); 
			if (this._distributorsOrdersOrderId != null)
				_tmp.DistributorsOrdersCollection = (TList<DistributorsOrders>) MakeCopyOf(this.DistributorsOrdersCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			OrdersEntityData _tmp = new OrdersEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.CustomerId = this.CustomerId;
			_tmp.OrderStatusId = this.OrderStatusId;
			_tmp.BillingId = this.BillingId;
			_tmp.TotalAmount = this.TotalAmount;
			_tmp.SurveyId = this.SurveyId;
			_tmp.IsActive = this.IsActive;
			_tmp.IsDeliver = this.IsDeliver;
			_tmp.IsSurveyDone = this.IsSurveyDone;
			_tmp.BookingDate = this.BookingDate;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.ModifiedDate = this.ModifiedDate;
			_tmp.DeletedDate = this.DeletedDate;
			
			#region Source Parent Composite Entities
			if (this.BillingIdSource != null && existingCopies.Contains(this.BillingIdSource))
				_tmp.BillingIdSource = existingCopies[this.BillingIdSource] as CustomerBilling;
			else
				_tmp.BillingIdSource = MakeCopyOf(this.BillingIdSource, existingCopies) as CustomerBilling;
			if (this.CustomerIdSource != null && existingCopies.Contains(this.CustomerIdSource))
				_tmp.CustomerIdSource = existingCopies[this.CustomerIdSource] as Customers;
			else
				_tmp.CustomerIdSource = MakeCopyOf(this.CustomerIdSource, existingCopies) as Customers;
			if (this.OrderStatusIdSource != null && existingCopies.Contains(this.OrderStatusIdSource))
				_tmp.OrderStatusIdSource = existingCopies[this.OrderStatusIdSource] as OrderStatus;
			else
				_tmp.OrderStatusIdSource = MakeCopyOf(this.OrderStatusIdSource, existingCopies) as OrderStatus;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.CustomerBillingCollection = (TList<CustomerBilling>) MakeCopyOf(this.CustomerBillingCollection, existingCopies); 
			_tmp.OrderDetailsCollection = (TList<OrderDetails>) MakeCopyOf(this.OrderDetailsCollection, existingCopies); 
			_tmp.DistributorsOrdersCollection = (TList<DistributorsOrders>) MakeCopyOf(this.DistributorsOrdersCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrdersColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(OrdersColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrdersColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(OrdersColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrdersColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(OrdersColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				OrdersEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new OrdersEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrdersColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(OrdersColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				OrdersEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new OrdersEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region OrdersEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Orders"/> object.
	/// </remarks>
	public class OrdersEventArgs : System.EventArgs
	{
		private OrdersColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the OrdersEventArgs class.
		///</summary>
		public OrdersEventArgs(OrdersColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the OrdersEventArgs class.
		///</summary>
		public OrdersEventArgs(OrdersColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The OrdersColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="OrdersColumn" />
		public OrdersColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Orders related events.
	///</summary>
	public delegate void OrdersEventHandler(object sender, OrdersEventArgs e);
	
	#region OrdersComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class OrdersComparer : System.Collections.Generic.IComparer<Orders>
	{
		OrdersColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:OrdersComparer"/> class.
        /// </summary>
		public OrdersComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:OrdersComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public OrdersComparer(OrdersColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Orders"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Orders"/> to compare.</param>
        /// <param name="b">The second <c>Orders</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Orders a, Orders b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Orders entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Orders a, Orders b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public OrdersColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region OrdersKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Orders"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class OrdersKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the OrdersKey class.
		/// </summary>
		public OrdersKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the OrdersKey class.
		/// </summary>
		public OrdersKey(OrdersBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the OrdersKey class.
		/// </summary>
		public OrdersKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private OrdersBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public OrdersBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region OrdersColumn Enum
	
	/// <summary>
	/// Enumerate the Orders columns.
	/// </summary>
	[Serializable]
	public enum OrdersColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// CustomerId : 
		/// </summary>
		[EnumTextValue("Customer Id")]
		[ColumnEnum("CustomerID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CustomerId = 2,
		/// <summary>
		/// OrderStatusId : 
		/// </summary>
		[EnumTextValue("Order Status Id")]
		[ColumnEnum("OrderStatusID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		OrderStatusId = 3,
		/// <summary>
		/// BillingId : 
		/// </summary>
		[EnumTextValue("Billing Id")]
		[ColumnEnum("BillingID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		BillingId = 4,
		/// <summary>
		/// TotalAmount : 
		/// </summary>
		[EnumTextValue("Total Amount")]
		[ColumnEnum("TotalAmount", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		TotalAmount = 5,
		/// <summary>
		/// SurveyId : 
		/// </summary>
		[EnumTextValue("Survey Id")]
		[ColumnEnum("SurveyID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SurveyId = 6,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("Is Active")]
		[ColumnEnum("ISActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 7,
		/// <summary>
		/// IsDeliver : 
		/// </summary>
		[EnumTextValue("Is Deliver")]
		[ColumnEnum("ISDeliver", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsDeliver = 8,
		/// <summary>
		/// IsSurveyDone : 
		/// </summary>
		[EnumTextValue("Is Survey Done")]
		[ColumnEnum("IsSurveyDone", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsSurveyDone = 9,
		/// <summary>
		/// BookingDate : 
		/// </summary>
		[EnumTextValue("Booking Date")]
		[ColumnEnum("BookingDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		BookingDate = 10,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("Created Date")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedDate = 11,
		/// <summary>
		/// ModifiedDate : 
		/// </summary>
		[EnumTextValue("Modified Date")]
		[ColumnEnum("ModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ModifiedDate = 12,
		/// <summary>
		/// DeletedDate : 
		/// </summary>
		[EnumTextValue("Deleted Date")]
		[ColumnEnum("DeletedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DeletedDate = 13
	}//End enum

	#endregion OrdersColumn Enum

} // end namespace

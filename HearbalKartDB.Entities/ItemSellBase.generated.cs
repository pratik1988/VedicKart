
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ItemSell.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using HearbalKartDB.Entities.Validation;
#endregion

namespace HearbalKartDB.Entities
{
	///<summary>
	/// An object representation of the 'ItemSell' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ItemSellBase : EntityBase, IItemSell, IEntityId<ItemSellKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ItemSellEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ItemSellEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ItemSellEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ItemSell> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ItemSellEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ItemSellEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ItemSellBase"/> instance.
		///</summary>
		public ItemSellBase()
		{
			this.entityData = new ItemSellEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ItemSellBase"/> instance.
		///</summary>
		///<param name="_itemId"></param>
		///<param name="_cost"></param>
		///<param name="_costVary"></param>
		///<param name="_createdate"></param>
		///<param name="_modifiedDate"></param>
		///<param name="_deletedDate"></param>
		public ItemSellBase(System.Int32? _itemId, System.String _cost, System.Decimal? _costVary, 
			System.DateTime? _createdate, System.DateTime? _modifiedDate, System.DateTime? _deletedDate)
		{
			this.entityData = new ItemSellEntityData();
			this.backupData = null;

			this.ItemId = _itemId;
			this.Cost = _cost;
			this.CostVary = _costVary;
			this.Createdate = _createdate;
			this.ModifiedDate = _modifiedDate;
			this.DeletedDate = _deletedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ItemSell"/> instance.
		///</summary>
		///<param name="_itemId"></param>
		///<param name="_cost"></param>
		///<param name="_costVary"></param>
		///<param name="_createdate"></param>
		///<param name="_modifiedDate"></param>
		///<param name="_deletedDate"></param>
		public static ItemSell CreateItemSell(System.Int32? _itemId, System.String _cost, System.Decimal? _costVary, 
			System.DateTime? _createdate, System.DateTime? _modifiedDate, System.DateTime? _deletedDate)
		{
			ItemSell newItemSell = new ItemSell();
			newItemSell.ItemId = _itemId;
			newItemSell.Cost = _cost;
			newItemSell.CostVary = _costVary;
			newItemSell.Createdate = _createdate;
			newItemSell.ModifiedDate = _modifiedDate;
			newItemSell.DeletedDate = _deletedDate;
			return newItemSell;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Id is required")]




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(ItemSellColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ItemSellColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ItemId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ItemId
		{
			get
			{
				return this.entityData.ItemId; 
			}
			
			set
			{
				if (this.entityData.ItemId == value)
					return;
				
                OnPropertyChanging("ItemId");                    
				OnColumnChanging(ItemSellColumn.ItemId, this.entityData.ItemId);
				this.entityData.ItemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ItemSellColumn.ItemId, this.entityData.ItemId);
				OnPropertyChanged("ItemId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Cost property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Cost
		{
			get
			{
				return this.entityData.Cost; 
			}
			
			set
			{
				if (this.entityData.Cost == value)
					return;
				
                OnPropertyChanging("Cost");                    
				OnColumnChanging(ItemSellColumn.Cost, this.entityData.Cost);
				this.entityData.Cost = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ItemSellColumn.Cost, this.entityData.Cost);
				OnPropertyChanged("Cost");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CostVary property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CostVary
		{
			get
			{
				return this.entityData.CostVary; 
			}
			
			set
			{
				if (this.entityData.CostVary == value)
					return;
				
                OnPropertyChanging("CostVary");                    
				OnColumnChanging(ItemSellColumn.CostVary, this.entityData.CostVary);
				this.entityData.CostVary = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ItemSellColumn.CostVary, this.entityData.CostVary);
				OnPropertyChanged("CostVary");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Createdate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Createdate
		{
			get
			{
				return this.entityData.Createdate; 
			}
			
			set
			{
				if (this.entityData.Createdate == value)
					return;
				
                OnPropertyChanging("Createdate");                    
				OnColumnChanging(ItemSellColumn.Createdate, this.entityData.Createdate);
				this.entityData.Createdate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ItemSellColumn.Createdate, this.entityData.Createdate);
				OnPropertyChanged("Createdate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ModifiedDate
		{
			get
			{
				return this.entityData.ModifiedDate; 
			}
			
			set
			{
				if (this.entityData.ModifiedDate == value)
					return;
				
                OnPropertyChanging("ModifiedDate");                    
				OnColumnChanging(ItemSellColumn.ModifiedDate, this.entityData.ModifiedDate);
				this.entityData.ModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ItemSellColumn.ModifiedDate, this.entityData.ModifiedDate);
				OnPropertyChanged("ModifiedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeletedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DeletedDate
		{
			get
			{
				return this.entityData.DeletedDate; 
			}
			
			set
			{
				if (this.entityData.DeletedDate == value)
					return;
				
                OnPropertyChanging("DeletedDate");                    
				OnColumnChanging(ItemSellColumn.DeletedDate, this.entityData.DeletedDate);
				this.entityData.DeletedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ItemSellColumn.DeletedDate, this.entityData.DeletedDate);
				OnPropertyChanged("DeletedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Items"/>.
		/// </summary>
		/// <value>The source Items for ItemId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Items ItemIdSource
      	{
            get { return entityData.ItemIdSource; }
            set { entityData.ItemIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of ProdTable objects
		///	which are related to this object through the relation FK_ProdTable_ItemSell
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ProdTable> ProdTableCollection
		{
			get { return entityData.ProdTableCollection; }
			set { entityData.ProdTableCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ItemSell"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "ItemID", "Cost", "CostVary", "Createdate", "ModifiedDate", "DeletedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ItemSellEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ItemSell) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ItemSell>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ItemSell);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ItemSell Entity 
		///</summary>
		protected virtual ItemSell Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ItemSell copy = new ItemSell();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.ItemId = this.ItemId;
				copy.Cost = this.Cost;
				copy.CostVary = this.CostVary;
				copy.Createdate = this.Createdate;
				copy.ModifiedDate = this.ModifiedDate;
				copy.DeletedDate = this.DeletedDate;
			
			if (this.ItemIdSource != null && existingCopies.Contains(this.ItemIdSource))
				copy.ItemIdSource = existingCopies[this.ItemIdSource] as Items;
			else
				copy.ItemIdSource = MakeCopyOf(this.ItemIdSource, existingCopies) as Items;
		
			//deep copy nested objects
			copy.ProdTableCollection = (TList<ProdTable>) MakeCopyOf(this.ProdTableCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ItemSell Entity 
		///</summary>
		public virtual ItemSell Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ItemSell Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ItemSell DeepCopy()
		{
			return EntityHelper.Clone<ItemSell>(this as ItemSell);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ItemSellEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ItemSellEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ItemSellEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ItemSellColumn column)
		{
			switch(column)
			{
					case ItemSellColumn.Id:
					return entityData.Id != _originalData.Id;
					case ItemSellColumn.ItemId:
					return entityData.ItemId != _originalData.ItemId;
					case ItemSellColumn.Cost:
					return entityData.Cost != _originalData.Cost;
					case ItemSellColumn.CostVary:
					return entityData.CostVary != _originalData.CostVary;
					case ItemSellColumn.Createdate:
					return entityData.Createdate != _originalData.Createdate;
					case ItemSellColumn.ModifiedDate:
					return entityData.ModifiedDate != _originalData.ModifiedDate;
					case ItemSellColumn.DeletedDate:
					return entityData.DeletedDate != _originalData.DeletedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ItemSellColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.ItemId != _originalData.ItemId;
			result = result || entityData.Cost != _originalData.Cost;
			result = result || entityData.CostVary != _originalData.CostVary;
			result = result || entityData.Createdate != _originalData.Createdate;
			result = result || entityData.ModifiedDate != _originalData.ModifiedDate;
			result = result || entityData.DeletedDate != _originalData.DeletedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a ItemSell Entity with the original data.
		///</summary>
		public ItemSell GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateItemSell(
				_originalData.ItemId,
				_originalData.Cost,
				_originalData.CostVary,
				_originalData.Createdate,
				_originalData.ModifiedDate,
				_originalData.DeletedDate
				);
				
			return (ItemSell)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ItemSellBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ItemSellBase)
				return ValueEquals(this, (ItemSellBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ItemSellBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.ItemId == null) ? string.Empty : this.ItemId.ToString()).GetHashCode() ^ 
					((this.Cost == null) ? string.Empty : this.Cost.ToString()).GetHashCode() ^ 
					((this.CostVary == null) ? string.Empty : this.CostVary.ToString()).GetHashCode() ^ 
					((this.Createdate == null) ? string.Empty : this.Createdate.ToString()).GetHashCode() ^ 
					((this.ModifiedDate == null) ? string.Empty : this.ModifiedDate.ToString()).GetHashCode() ^ 
					((this.DeletedDate == null) ? string.Empty : this.DeletedDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ItemSellBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ItemSellBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ItemSellBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ItemSellBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ItemSellBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ItemSellBase Object1, ItemSellBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.ItemId != null && Object2.ItemId != null )
			{
				if (Object1.ItemId != Object2.ItemId)
					equal = false;
			}
			else if (Object1.ItemId == null ^ Object2.ItemId == null )
			{
				equal = false;
			}
			if ( Object1.Cost != null && Object2.Cost != null )
			{
				if (Object1.Cost != Object2.Cost)
					equal = false;
			}
			else if (Object1.Cost == null ^ Object2.Cost == null )
			{
				equal = false;
			}
			if ( Object1.CostVary != null && Object2.CostVary != null )
			{
				if (Object1.CostVary != Object2.CostVary)
					equal = false;
			}
			else if (Object1.CostVary == null ^ Object2.CostVary == null )
			{
				equal = false;
			}
			if ( Object1.Createdate != null && Object2.Createdate != null )
			{
				if (Object1.Createdate != Object2.Createdate)
					equal = false;
			}
			else if (Object1.Createdate == null ^ Object2.Createdate == null )
			{
				equal = false;
			}
			if ( Object1.ModifiedDate != null && Object2.ModifiedDate != null )
			{
				if (Object1.ModifiedDate != Object2.ModifiedDate)
					equal = false;
			}
			else if (Object1.ModifiedDate == null ^ Object2.ModifiedDate == null )
			{
				equal = false;
			}
			if ( Object1.DeletedDate != null && Object2.DeletedDate != null )
			{
				if (Object1.DeletedDate != Object2.DeletedDate)
					equal = false;
			}
			else if (Object1.DeletedDate == null ^ Object2.DeletedDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ItemSellBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ItemSellComparer GetComparer()
        {
            return new ItemSellComparer();
        }
        */

        // Comparer delegates back to ItemSell
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ItemSell rhs, ItemSellColumn which)
        {
            switch (which)
            {
            	
            	
            	case ItemSellColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case ItemSellColumn.ItemId:
            		return this.ItemId.Value.CompareTo(rhs.ItemId.Value);
            		
            		                 
            	
            	
            	case ItemSellColumn.Cost:
            		return this.Cost.CompareTo(rhs.Cost);
            		
            		                 
            	
            	
            	case ItemSellColumn.CostVary:
            		return this.CostVary.Value.CompareTo(rhs.CostVary.Value);
            		
            		                 
            	
            	
            	case ItemSellColumn.Createdate:
            		return this.Createdate.Value.CompareTo(rhs.Createdate.Value);
            		
            		                 
            	
            	
            	case ItemSellColumn.ModifiedDate:
            		return this.ModifiedDate.Value.CompareTo(rhs.ModifiedDate.Value);
            		
            		                 
            	
            	
            	case ItemSellColumn.DeletedDate:
            		return this.DeletedDate.Value.CompareTo(rhs.DeletedDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ItemSellKey> Members
		
		// member variable for the EntityId property
		private ItemSellKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ItemSellKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ItemSellKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ItemSell")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- Id: {0}{7}- ItemId: {1}{7}- Cost: {2}{7}- CostVary: {3}{7}- Createdate: {4}{7}- ModifiedDate: {5}{7}- DeletedDate: {6}{7}{9}", 
				this.Id,
				(this.ItemId == null) ? string.Empty : this.ItemId.ToString(),
				(this.Cost == null) ? string.Empty : this.Cost.ToString(),
				(this.CostVary == null) ? string.Empty : this.CostVary.ToString(),
				(this.Createdate == null) ? string.Empty : this.Createdate.ToString(),
				(this.ModifiedDate == null) ? string.Empty : this.ModifiedDate.ToString(),
				(this.DeletedDate == null) ? string.Empty : this.DeletedDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ItemSell' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ItemSellEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ItemSell"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// ItemID : 
		/// </summary>
		public System.Int32? ItemId = null;
		
		/// <summary>
		/// Cost : 
		/// </summary>
		public System.String Cost = null;
		
		/// <summary>
		/// CostVary : 
		/// </summary>
		public System.Decimal? CostVary = null;
		
		/// <summary>
		/// Createdate : 
		/// </summary>
		public System.DateTime? Createdate = null;
		
		/// <summary>
		/// ModifiedDate : 
		/// </summary>
		public System.DateTime? ModifiedDate = null;
		
		/// <summary>
		/// DeletedDate : 
		/// </summary>
		public System.DateTime? DeletedDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Items _itemIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Items"/>.
		/// </summary>
		/// <value>The source Items for ItemId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Items ItemIdSource
      	{
            get { return this._itemIdSource; }
            set { this._itemIdSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region ProdTableCollection
		
		private TList<ProdTable> _prodTableSellId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _prodTableSellId
		/// </summary>
		
		public TList<ProdTable> ProdTableCollection
		{
			get
			{
				if (_prodTableSellId == null)
				{
				_prodTableSellId = new TList<ProdTable>();
				}
	
				return _prodTableSellId;
			}
			set { _prodTableSellId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ItemSellEntityData _tmp = new ItemSellEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.ItemId = this.ItemId;
			_tmp.Cost = this.Cost;
			_tmp.CostVary = this.CostVary;
			_tmp.Createdate = this.Createdate;
			_tmp.ModifiedDate = this.ModifiedDate;
			_tmp.DeletedDate = this.DeletedDate;
			
			#region Source Parent Composite Entities
			if (this.ItemIdSource != null)
				_tmp.ItemIdSource = MakeCopyOf(this.ItemIdSource) as Items;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._prodTableSellId != null)
				_tmp.ProdTableCollection = (TList<ProdTable>) MakeCopyOf(this.ProdTableCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ItemSellEntityData _tmp = new ItemSellEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.ItemId = this.ItemId;
			_tmp.Cost = this.Cost;
			_tmp.CostVary = this.CostVary;
			_tmp.Createdate = this.Createdate;
			_tmp.ModifiedDate = this.ModifiedDate;
			_tmp.DeletedDate = this.DeletedDate;
			
			#region Source Parent Composite Entities
			if (this.ItemIdSource != null && existingCopies.Contains(this.ItemIdSource))
				_tmp.ItemIdSource = existingCopies[this.ItemIdSource] as Items;
			else
				_tmp.ItemIdSource = MakeCopyOf(this.ItemIdSource, existingCopies) as Items;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.ProdTableCollection = (TList<ProdTable>) MakeCopyOf(this.ProdTableCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemSellColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ItemSellColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemSellColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ItemSellColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemSellColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ItemSellColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ItemSellEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ItemSellEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ItemSellColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ItemSellColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ItemSellEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ItemSellEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ItemSellEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ItemSell"/> object.
	/// </remarks>
	public class ItemSellEventArgs : System.EventArgs
	{
		private ItemSellColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ItemSellEventArgs class.
		///</summary>
		public ItemSellEventArgs(ItemSellColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ItemSellEventArgs class.
		///</summary>
		public ItemSellEventArgs(ItemSellColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ItemSellColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ItemSellColumn" />
		public ItemSellColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ItemSell related events.
	///</summary>
	public delegate void ItemSellEventHandler(object sender, ItemSellEventArgs e);
	
	#region ItemSellComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ItemSellComparer : System.Collections.Generic.IComparer<ItemSell>
	{
		ItemSellColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ItemSellComparer"/> class.
        /// </summary>
		public ItemSellComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ItemSellComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ItemSellComparer(ItemSellColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ItemSell"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ItemSell"/> to compare.</param>
        /// <param name="b">The second <c>ItemSell</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ItemSell a, ItemSell b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ItemSell entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ItemSell a, ItemSell b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ItemSellColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ItemSellKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ItemSell"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ItemSellKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ItemSellKey class.
		/// </summary>
		public ItemSellKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ItemSellKey class.
		/// </summary>
		public ItemSellKey(ItemSellBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ItemSellKey class.
		/// </summary>
		public ItemSellKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ItemSellBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ItemSellBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ItemSellColumn Enum
	
	/// <summary>
	/// Enumerate the ItemSell columns.
	/// </summary>
	[Serializable]
	public enum ItemSellColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// ItemId : 
		/// </summary>
		[EnumTextValue("Item Id")]
		[ColumnEnum("ItemID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ItemId = 2,
		/// <summary>
		/// Cost : 
		/// </summary>
		[EnumTextValue("Cost")]
		[ColumnEnum("Cost", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Cost = 3,
		/// <summary>
		/// CostVary : 
		/// </summary>
		[EnumTextValue("Cost Vary")]
		[ColumnEnum("CostVary", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CostVary = 4,
		/// <summary>
		/// Createdate : 
		/// </summary>
		[EnumTextValue("Createdate")]
		[ColumnEnum("Createdate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Createdate = 5,
		/// <summary>
		/// ModifiedDate : 
		/// </summary>
		[EnumTextValue("Modified Date")]
		[ColumnEnum("ModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ModifiedDate = 6,
		/// <summary>
		/// DeletedDate : 
		/// </summary>
		[EnumTextValue("Deleted Date")]
		[ColumnEnum("DeletedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DeletedDate = 7
	}//End enum

	#endregion ItemSellColumn Enum

} // end namespace

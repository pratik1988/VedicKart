
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Distributars.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using HearbalKartDB.Entities.Validation;
#endregion

namespace HearbalKartDB.Entities
{
	///<summary>
	/// An object representation of the 'Distributars' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class DistributarsBase : EntityBase, IDistributars, IEntityId<DistributarsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private DistributarsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private DistributarsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private DistributarsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Distributars> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DistributarsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DistributarsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="DistributarsBase"/> instance.
		///</summary>
		public DistributarsBase()
		{
			this.entityData = new DistributarsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="DistributarsBase"/> instance.
		///</summary>
		///<param name="_name"></param>
		///<param name="_firstName"></param>
		///<param name="_lastName"></param>
		///<param name="_address"></param>
		///<param name="_stateId"></param>
		///<param name="_cityId"></param>
		///<param name="_countryId"></param>
		///<param name="_pin"></param>
		///<param name="_daliveredDaysId"></param>
		///<param name="_description"></param>
		///<param name="_mobileNo"></param>
		///<param name="_landNo"></param>
		///<param name="_isActive"></param>
		///<param name="_createdDate"></param>
		///<param name="_deletedDate"></param>
		///<param name="_modifiedDate"></param>
		public DistributarsBase(System.String _name, System.String _firstName, System.String _lastName, 
			System.String _address, System.Int32? _stateId, System.Int32? _cityId, System.Int32? _countryId, 
			System.Int64? _pin, System.Int32? _daliveredDaysId, System.String _description, System.Int64? _mobileNo, 
			System.Int64? _landNo, System.Boolean? _isActive, System.DateTime? _createdDate, System.DateTime? _deletedDate, 
			System.DateTime? _modifiedDate)
		{
			this.entityData = new DistributarsEntityData();
			this.backupData = null;

			this.Name = _name;
			this.FirstName = _firstName;
			this.LastName = _lastName;
			this.Address = _address;
			this.StateId = _stateId;
			this.CityId = _cityId;
			this.CountryId = _countryId;
			this.Pin = _pin;
			this.DaliveredDaysId = _daliveredDaysId;
			this.Description = _description;
			this.MobileNo = _mobileNo;
			this.LandNo = _landNo;
			this.IsActive = _isActive;
			this.CreatedDate = _createdDate;
			this.DeletedDate = _deletedDate;
			this.ModifiedDate = _modifiedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Distributars"/> instance.
		///</summary>
		///<param name="_name"></param>
		///<param name="_firstName"></param>
		///<param name="_lastName"></param>
		///<param name="_address"></param>
		///<param name="_stateId"></param>
		///<param name="_cityId"></param>
		///<param name="_countryId"></param>
		///<param name="_pin"></param>
		///<param name="_daliveredDaysId"></param>
		///<param name="_description"></param>
		///<param name="_mobileNo"></param>
		///<param name="_landNo"></param>
		///<param name="_isActive"></param>
		///<param name="_createdDate"></param>
		///<param name="_deletedDate"></param>
		///<param name="_modifiedDate"></param>
		public static Distributars CreateDistributars(System.String _name, System.String _firstName, System.String _lastName, 
			System.String _address, System.Int32? _stateId, System.Int32? _cityId, System.Int32? _countryId, 
			System.Int64? _pin, System.Int32? _daliveredDaysId, System.String _description, System.Int64? _mobileNo, 
			System.Int64? _landNo, System.Boolean? _isActive, System.DateTime? _createdDate, System.DateTime? _deletedDate, 
			System.DateTime? _modifiedDate)
		{
			Distributars newDistributars = new Distributars();
			newDistributars.Name = _name;
			newDistributars.FirstName = _firstName;
			newDistributars.LastName = _lastName;
			newDistributars.Address = _address;
			newDistributars.StateId = _stateId;
			newDistributars.CityId = _cityId;
			newDistributars.CountryId = _countryId;
			newDistributars.Pin = _pin;
			newDistributars.DaliveredDaysId = _daliveredDaysId;
			newDistributars.Description = _description;
			newDistributars.MobileNo = _mobileNo;
			newDistributars.LandNo = _landNo;
			newDistributars.IsActive = _isActive;
			newDistributars.CreatedDate = _createdDate;
			newDistributars.DeletedDate = _deletedDate;
			newDistributars.ModifiedDate = _modifiedDate;
			return newDistributars;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Id is required")]




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(DistributarsColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DistributarsColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
				
                OnPropertyChanging("Name");                    
				OnColumnChanging(DistributarsColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DistributarsColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String FirstName
		{
			get
			{
				return this.entityData.FirstName; 
			}
			
			set
			{
				if (this.entityData.FirstName == value)
					return;
				
                OnPropertyChanging("FirstName");                    
				OnColumnChanging(DistributarsColumn.FirstName, this.entityData.FirstName);
				this.entityData.FirstName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DistributarsColumn.FirstName, this.entityData.FirstName);
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String LastName
		{
			get
			{
				return this.entityData.LastName; 
			}
			
			set
			{
				if (this.entityData.LastName == value)
					return;
				
                OnPropertyChanging("LastName");                    
				OnColumnChanging(DistributarsColumn.LastName, this.entityData.LastName);
				this.entityData.LastName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DistributarsColumn.LastName, this.entityData.LastName);
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Address
		{
			get
			{
				return this.entityData.Address; 
			}
			
			set
			{
				if (this.entityData.Address == value)
					return;
				
                OnPropertyChanging("Address");                    
				OnColumnChanging(DistributarsColumn.Address, this.entityData.Address);
				this.entityData.Address = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DistributarsColumn.Address, this.entityData.Address);
				OnPropertyChanged("Address");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StateId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? StateId
		{
			get
			{
				return this.entityData.StateId; 
			}
			
			set
			{
				if (this.entityData.StateId == value)
					return;
				
                OnPropertyChanging("StateId");                    
				OnColumnChanging(DistributarsColumn.StateId, this.entityData.StateId);
				this.entityData.StateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DistributarsColumn.StateId, this.entityData.StateId);
				OnPropertyChanged("StateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CityId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CityId
		{
			get
			{
				return this.entityData.CityId; 
			}
			
			set
			{
				if (this.entityData.CityId == value)
					return;
				
                OnPropertyChanging("CityId");                    
				OnColumnChanging(DistributarsColumn.CityId, this.entityData.CityId);
				this.entityData.CityId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DistributarsColumn.CityId, this.entityData.CityId);
				OnPropertyChanged("CityId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CountryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CountryId
		{
			get
			{
				return this.entityData.CountryId; 
			}
			
			set
			{
				if (this.entityData.CountryId == value)
					return;
				
                OnPropertyChanging("CountryId");                    
				OnColumnChanging(DistributarsColumn.CountryId, this.entityData.CountryId);
				this.entityData.CountryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DistributarsColumn.CountryId, this.entityData.CountryId);
				OnPropertyChanged("CountryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Pin property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Pin
		{
			get
			{
				return this.entityData.Pin; 
			}
			
			set
			{
				if (this.entityData.Pin == value)
					return;
				
                OnPropertyChanging("Pin");                    
				OnColumnChanging(DistributarsColumn.Pin, this.entityData.Pin);
				this.entityData.Pin = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DistributarsColumn.Pin, this.entityData.Pin);
				OnPropertyChanged("Pin");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DaliveredDaysId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DaliveredDaysId
		{
			get
			{
				return this.entityData.DaliveredDaysId; 
			}
			
			set
			{
				if (this.entityData.DaliveredDaysId == value)
					return;
				
                OnPropertyChanging("DaliveredDaysId");                    
				OnColumnChanging(DistributarsColumn.DaliveredDaysId, this.entityData.DaliveredDaysId);
				this.entityData.DaliveredDaysId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DistributarsColumn.DaliveredDaysId, this.entityData.DaliveredDaysId);
				OnPropertyChanged("DaliveredDaysId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
				
                OnPropertyChanging("Description");                    
				OnColumnChanging(DistributarsColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DistributarsColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MobileNo property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? MobileNo
		{
			get
			{
				return this.entityData.MobileNo; 
			}
			
			set
			{
				if (this.entityData.MobileNo == value)
					return;
				
                OnPropertyChanging("MobileNo");                    
				OnColumnChanging(DistributarsColumn.MobileNo, this.entityData.MobileNo);
				this.entityData.MobileNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DistributarsColumn.MobileNo, this.entityData.MobileNo);
				OnPropertyChanged("MobileNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LandNo property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? LandNo
		{
			get
			{
				return this.entityData.LandNo; 
			}
			
			set
			{
				if (this.entityData.LandNo == value)
					return;
				
                OnPropertyChanging("LandNo");                    
				OnColumnChanging(DistributarsColumn.LandNo, this.entityData.LandNo);
				this.entityData.LandNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DistributarsColumn.LandNo, this.entityData.LandNo);
				OnPropertyChanged("LandNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
				
                OnPropertyChanging("IsActive");                    
				OnColumnChanging(DistributarsColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DistributarsColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
				
                OnPropertyChanging("CreatedDate");                    
				OnColumnChanging(DistributarsColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DistributarsColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeletedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DeletedDate
		{
			get
			{
				return this.entityData.DeletedDate; 
			}
			
			set
			{
				if (this.entityData.DeletedDate == value)
					return;
				
                OnPropertyChanging("DeletedDate");                    
				OnColumnChanging(DistributarsColumn.DeletedDate, this.entityData.DeletedDate);
				this.entityData.DeletedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DistributarsColumn.DeletedDate, this.entityData.DeletedDate);
				OnPropertyChanged("DeletedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ModifiedDate
		{
			get
			{
				return this.entityData.ModifiedDate; 
			}
			
			set
			{
				if (this.entityData.ModifiedDate == value)
					return;
				
                OnPropertyChanging("ModifiedDate");                    
				OnColumnChanging(DistributarsColumn.ModifiedDate, this.entityData.ModifiedDate);
				this.entityData.ModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DistributarsColumn.ModifiedDate, this.entityData.ModifiedDate);
				OnPropertyChanged("ModifiedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Cities"/>.
		/// </summary>
		/// <value>The source Cities for CityId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Cities CityIdSource
      	{
            get { return entityData.CityIdSource; }
            set { entityData.CityIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Countries"/>.
		/// </summary>
		/// <value>The source Countries for CountryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Countries CountryIdSource
      	{
            get { return entityData.CountryIdSource; }
            set { entityData.CountryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="DeliveredDays"/>.
		/// </summary>
		/// <value>The source DeliveredDays for DaliveredDaysId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual DeliveredDays DaliveredDaysIdSource
      	{
            get { return entityData.DaliveredDaysIdSource; }
            set { entityData.DaliveredDaysIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="States"/>.
		/// </summary>
		/// <value>The source States for StateId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual States StateIdSource
      	{
            get { return entityData.StateIdSource; }
            set { entityData.StateIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of DistributorsOrders objects
		///	which are related to this object through the relation FK_DistributorsOrders_Distributars
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DistributorsOrders> DistributorsOrdersCollection
		{
			get { return entityData.DistributorsOrdersCollection; }
			set { entityData.DistributorsOrdersCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Distributars"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "Name", "FirstName", "LastName", "Address", "StateID", "CityID", "CountryID", "Pin", "DaliveredDaysID", "Description", "MobileNo", "LandNo", "IsActive", "CreatedDate", "DeletedDate", "ModifiedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as DistributarsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Distributars) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Distributars>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Distributars);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Distributars Entity 
		///</summary>
		protected virtual Distributars Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Distributars copy = new Distributars();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.Name = this.Name;
				copy.FirstName = this.FirstName;
				copy.LastName = this.LastName;
				copy.Address = this.Address;
				copy.StateId = this.StateId;
				copy.CityId = this.CityId;
				copy.CountryId = this.CountryId;
				copy.Pin = this.Pin;
				copy.DaliveredDaysId = this.DaliveredDaysId;
				copy.Description = this.Description;
				copy.MobileNo = this.MobileNo;
				copy.LandNo = this.LandNo;
				copy.IsActive = this.IsActive;
				copy.CreatedDate = this.CreatedDate;
				copy.DeletedDate = this.DeletedDate;
				copy.ModifiedDate = this.ModifiedDate;
			
			if (this.CityIdSource != null && existingCopies.Contains(this.CityIdSource))
				copy.CityIdSource = existingCopies[this.CityIdSource] as Cities;
			else
				copy.CityIdSource = MakeCopyOf(this.CityIdSource, existingCopies) as Cities;
			if (this.CountryIdSource != null && existingCopies.Contains(this.CountryIdSource))
				copy.CountryIdSource = existingCopies[this.CountryIdSource] as Countries;
			else
				copy.CountryIdSource = MakeCopyOf(this.CountryIdSource, existingCopies) as Countries;
			if (this.DaliveredDaysIdSource != null && existingCopies.Contains(this.DaliveredDaysIdSource))
				copy.DaliveredDaysIdSource = existingCopies[this.DaliveredDaysIdSource] as DeliveredDays;
			else
				copy.DaliveredDaysIdSource = MakeCopyOf(this.DaliveredDaysIdSource, existingCopies) as DeliveredDays;
			if (this.StateIdSource != null && existingCopies.Contains(this.StateIdSource))
				copy.StateIdSource = existingCopies[this.StateIdSource] as States;
			else
				copy.StateIdSource = MakeCopyOf(this.StateIdSource, existingCopies) as States;
		
			//deep copy nested objects
			copy.DistributorsOrdersCollection = (TList<DistributorsOrders>) MakeCopyOf(this.DistributorsOrdersCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Distributars Entity 
		///</summary>
		public virtual Distributars Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Distributars Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Distributars DeepCopy()
		{
			return EntityHelper.Clone<Distributars>(this as Distributars);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as DistributarsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new DistributarsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as DistributarsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(DistributarsColumn column)
		{
			switch(column)
			{
					case DistributarsColumn.Id:
					return entityData.Id != _originalData.Id;
					case DistributarsColumn.Name:
					return entityData.Name != _originalData.Name;
					case DistributarsColumn.FirstName:
					return entityData.FirstName != _originalData.FirstName;
					case DistributarsColumn.LastName:
					return entityData.LastName != _originalData.LastName;
					case DistributarsColumn.Address:
					return entityData.Address != _originalData.Address;
					case DistributarsColumn.StateId:
					return entityData.StateId != _originalData.StateId;
					case DistributarsColumn.CityId:
					return entityData.CityId != _originalData.CityId;
					case DistributarsColumn.CountryId:
					return entityData.CountryId != _originalData.CountryId;
					case DistributarsColumn.Pin:
					return entityData.Pin != _originalData.Pin;
					case DistributarsColumn.DaliveredDaysId:
					return entityData.DaliveredDaysId != _originalData.DaliveredDaysId;
					case DistributarsColumn.Description:
					return entityData.Description != _originalData.Description;
					case DistributarsColumn.MobileNo:
					return entityData.MobileNo != _originalData.MobileNo;
					case DistributarsColumn.LandNo:
					return entityData.LandNo != _originalData.LandNo;
					case DistributarsColumn.IsActive:
					return entityData.IsActive != _originalData.IsActive;
					case DistributarsColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case DistributarsColumn.DeletedDate:
					return entityData.DeletedDate != _originalData.DeletedDate;
					case DistributarsColumn.ModifiedDate:
					return entityData.ModifiedDate != _originalData.ModifiedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< DistributarsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.FirstName != _originalData.FirstName;
			result = result || entityData.LastName != _originalData.LastName;
			result = result || entityData.Address != _originalData.Address;
			result = result || entityData.StateId != _originalData.StateId;
			result = result || entityData.CityId != _originalData.CityId;
			result = result || entityData.CountryId != _originalData.CountryId;
			result = result || entityData.Pin != _originalData.Pin;
			result = result || entityData.DaliveredDaysId != _originalData.DaliveredDaysId;
			result = result || entityData.Description != _originalData.Description;
			result = result || entityData.MobileNo != _originalData.MobileNo;
			result = result || entityData.LandNo != _originalData.LandNo;
			result = result || entityData.IsActive != _originalData.IsActive;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.DeletedDate != _originalData.DeletedDate;
			result = result || entityData.ModifiedDate != _originalData.ModifiedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a Distributars Entity with the original data.
		///</summary>
		public Distributars GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateDistributars(
				_originalData.Name,
				_originalData.FirstName,
				_originalData.LastName,
				_originalData.Address,
				_originalData.StateId,
				_originalData.CityId,
				_originalData.CountryId,
				_originalData.Pin,
				_originalData.DaliveredDaysId,
				_originalData.Description,
				_originalData.MobileNo,
				_originalData.LandNo,
				_originalData.IsActive,
				_originalData.CreatedDate,
				_originalData.DeletedDate,
				_originalData.ModifiedDate
				);
				
			return (Distributars)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="DistributarsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is DistributarsBase)
				return ValueEquals(this, (DistributarsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="DistributarsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.Name == null) ? string.Empty : this.Name.ToString()).GetHashCode() ^ 
					((this.FirstName == null) ? string.Empty : this.FirstName.ToString()).GetHashCode() ^ 
					((this.LastName == null) ? string.Empty : this.LastName.ToString()).GetHashCode() ^ 
					((this.Address == null) ? string.Empty : this.Address.ToString()).GetHashCode() ^ 
					((this.StateId == null) ? string.Empty : this.StateId.ToString()).GetHashCode() ^ 
					((this.CityId == null) ? string.Empty : this.CityId.ToString()).GetHashCode() ^ 
					((this.CountryId == null) ? string.Empty : this.CountryId.ToString()).GetHashCode() ^ 
					((this.Pin == null) ? string.Empty : this.Pin.ToString()).GetHashCode() ^ 
					((this.DaliveredDaysId == null) ? string.Empty : this.DaliveredDaysId.ToString()).GetHashCode() ^ 
					((this.Description == null) ? string.Empty : this.Description.ToString()).GetHashCode() ^ 
					((this.MobileNo == null) ? string.Empty : this.MobileNo.ToString()).GetHashCode() ^ 
					((this.LandNo == null) ? string.Empty : this.LandNo.ToString()).GetHashCode() ^ 
					((this.IsActive == null) ? string.Empty : this.IsActive.ToString()).GetHashCode() ^ 
					((this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString()).GetHashCode() ^ 
					((this.DeletedDate == null) ? string.Empty : this.DeletedDate.ToString()).GetHashCode() ^ 
					((this.ModifiedDate == null) ? string.Empty : this.ModifiedDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="DistributarsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(DistributarsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="DistributarsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="DistributarsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="DistributarsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(DistributarsBase Object1, DistributarsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object2.Name == null )
			{
				equal = false;
			}
			if ( Object1.FirstName != null && Object2.FirstName != null )
			{
				if (Object1.FirstName != Object2.FirstName)
					equal = false;
			}
			else if (Object1.FirstName == null ^ Object2.FirstName == null )
			{
				equal = false;
			}
			if ( Object1.LastName != null && Object2.LastName != null )
			{
				if (Object1.LastName != Object2.LastName)
					equal = false;
			}
			else if (Object1.LastName == null ^ Object2.LastName == null )
			{
				equal = false;
			}
			if ( Object1.Address != null && Object2.Address != null )
			{
				if (Object1.Address != Object2.Address)
					equal = false;
			}
			else if (Object1.Address == null ^ Object2.Address == null )
			{
				equal = false;
			}
			if ( Object1.StateId != null && Object2.StateId != null )
			{
				if (Object1.StateId != Object2.StateId)
					equal = false;
			}
			else if (Object1.StateId == null ^ Object2.StateId == null )
			{
				equal = false;
			}
			if ( Object1.CityId != null && Object2.CityId != null )
			{
				if (Object1.CityId != Object2.CityId)
					equal = false;
			}
			else if (Object1.CityId == null ^ Object2.CityId == null )
			{
				equal = false;
			}
			if ( Object1.CountryId != null && Object2.CountryId != null )
			{
				if (Object1.CountryId != Object2.CountryId)
					equal = false;
			}
			else if (Object1.CountryId == null ^ Object2.CountryId == null )
			{
				equal = false;
			}
			if ( Object1.Pin != null && Object2.Pin != null )
			{
				if (Object1.Pin != Object2.Pin)
					equal = false;
			}
			else if (Object1.Pin == null ^ Object2.Pin == null )
			{
				equal = false;
			}
			if ( Object1.DaliveredDaysId != null && Object2.DaliveredDaysId != null )
			{
				if (Object1.DaliveredDaysId != Object2.DaliveredDaysId)
					equal = false;
			}
			else if (Object1.DaliveredDaysId == null ^ Object2.DaliveredDaysId == null )
			{
				equal = false;
			}
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if ( Object1.MobileNo != null && Object2.MobileNo != null )
			{
				if (Object1.MobileNo != Object2.MobileNo)
					equal = false;
			}
			else if (Object1.MobileNo == null ^ Object2.MobileNo == null )
			{
				equal = false;
			}
			if ( Object1.LandNo != null && Object2.LandNo != null )
			{
				if (Object1.LandNo != Object2.LandNo)
					equal = false;
			}
			else if (Object1.LandNo == null ^ Object2.LandNo == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.CreatedDate != null && Object2.CreatedDate != null )
			{
				if (Object1.CreatedDate != Object2.CreatedDate)
					equal = false;
			}
			else if (Object1.CreatedDate == null ^ Object2.CreatedDate == null )
			{
				equal = false;
			}
			if ( Object1.DeletedDate != null && Object2.DeletedDate != null )
			{
				if (Object1.DeletedDate != Object2.DeletedDate)
					equal = false;
			}
			else if (Object1.DeletedDate == null ^ Object2.DeletedDate == null )
			{
				equal = false;
			}
			if ( Object1.ModifiedDate != null && Object2.ModifiedDate != null )
			{
				if (Object1.ModifiedDate != Object2.ModifiedDate)
					equal = false;
			}
			else if (Object1.ModifiedDate == null ^ Object2.ModifiedDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((DistributarsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static DistributarsComparer GetComparer()
        {
            return new DistributarsComparer();
        }
        */

        // Comparer delegates back to Distributars
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Distributars rhs, DistributarsColumn which)
        {
            switch (which)
            {
            	
            	
            	case DistributarsColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case DistributarsColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case DistributarsColumn.FirstName:
            		return this.FirstName.CompareTo(rhs.FirstName);
            		
            		                 
            	
            	
            	case DistributarsColumn.LastName:
            		return this.LastName.CompareTo(rhs.LastName);
            		
            		                 
            	
            	
            	case DistributarsColumn.Address:
            		return this.Address.CompareTo(rhs.Address);
            		
            		                 
            	
            	
            	case DistributarsColumn.StateId:
            		return this.StateId.Value.CompareTo(rhs.StateId.Value);
            		
            		                 
            	
            	
            	case DistributarsColumn.CityId:
            		return this.CityId.Value.CompareTo(rhs.CityId.Value);
            		
            		                 
            	
            	
            	case DistributarsColumn.CountryId:
            		return this.CountryId.Value.CompareTo(rhs.CountryId.Value);
            		
            		                 
            	
            	
            	case DistributarsColumn.Pin:
            		return this.Pin.Value.CompareTo(rhs.Pin.Value);
            		
            		                 
            	
            	
            	case DistributarsColumn.DaliveredDaysId:
            		return this.DaliveredDaysId.Value.CompareTo(rhs.DaliveredDaysId.Value);
            		
            		                 
            	
            	
            	case DistributarsColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case DistributarsColumn.MobileNo:
            		return this.MobileNo.Value.CompareTo(rhs.MobileNo.Value);
            		
            		                 
            	
            	
            	case DistributarsColumn.LandNo:
            		return this.LandNo.Value.CompareTo(rhs.LandNo.Value);
            		
            		                 
            	
            	
            	case DistributarsColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case DistributarsColumn.CreatedDate:
            		return this.CreatedDate.Value.CompareTo(rhs.CreatedDate.Value);
            		
            		                 
            	
            	
            	case DistributarsColumn.DeletedDate:
            		return this.DeletedDate.Value.CompareTo(rhs.DeletedDate.Value);
            		
            		                 
            	
            	
            	case DistributarsColumn.ModifiedDate:
            		return this.ModifiedDate.Value.CompareTo(rhs.ModifiedDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<DistributarsKey> Members
		
		// member variable for the EntityId property
		private DistributarsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual DistributarsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new DistributarsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Distributars")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- Id: {0}{17}- Name: {1}{17}- FirstName: {2}{17}- LastName: {3}{17}- Address: {4}{17}- StateId: {5}{17}- CityId: {6}{17}- CountryId: {7}{17}- Pin: {8}{17}- DaliveredDaysId: {9}{17}- Description: {10}{17}- MobileNo: {11}{17}- LandNo: {12}{17}- IsActive: {13}{17}- CreatedDate: {14}{17}- DeletedDate: {15}{17}- ModifiedDate: {16}{17}{19}", 
				this.Id,
				(this.Name == null) ? string.Empty : this.Name.ToString(),
				(this.FirstName == null) ? string.Empty : this.FirstName.ToString(),
				(this.LastName == null) ? string.Empty : this.LastName.ToString(),
				(this.Address == null) ? string.Empty : this.Address.ToString(),
				(this.StateId == null) ? string.Empty : this.StateId.ToString(),
				(this.CityId == null) ? string.Empty : this.CityId.ToString(),
				(this.CountryId == null) ? string.Empty : this.CountryId.ToString(),
				(this.Pin == null) ? string.Empty : this.Pin.ToString(),
				(this.DaliveredDaysId == null) ? string.Empty : this.DaliveredDaysId.ToString(),
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				(this.MobileNo == null) ? string.Empty : this.MobileNo.ToString(),
				(this.LandNo == null) ? string.Empty : this.LandNo.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString(),
				(this.DeletedDate == null) ? string.Empty : this.DeletedDate.ToString(),
				(this.ModifiedDate == null) ? string.Empty : this.ModifiedDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Distributars' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class DistributarsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Distributars"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String Name = null;
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		public System.String FirstName = null;
		
		/// <summary>
		/// LastName : 
		/// </summary>
		public System.String LastName = null;
		
		/// <summary>
		/// Address : 
		/// </summary>
		public System.String Address = null;
		
		/// <summary>
		/// StateID : 
		/// </summary>
		public System.Int32? StateId = null;
		
		/// <summary>
		/// CityID : 
		/// </summary>
		public System.Int32? CityId = null;
		
		/// <summary>
		/// CountryID : 
		/// </summary>
		public System.Int32? CountryId = null;
		
		/// <summary>
		/// Pin : 
		/// </summary>
		public System.Int64? Pin = null;
		
		/// <summary>
		/// DaliveredDaysID : 
		/// </summary>
		public System.Int32? DaliveredDaysId = null;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String Description = null;
		
		/// <summary>
		/// MobileNo : 
		/// </summary>
		public System.Int64? MobileNo = null;
		
		/// <summary>
		/// LandNo : 
		/// </summary>
		public System.Int64? LandNo = null;
		
		/// <summary>
		/// IsActive : 
		/// </summary>
		public System.Boolean? IsActive = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime? CreatedDate = null;
		
		/// <summary>
		/// DeletedDate : 
		/// </summary>
		public System.DateTime? DeletedDate = null;
		
		/// <summary>
		/// ModifiedDate : 
		/// </summary>
		public System.DateTime? ModifiedDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Cities _cityIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Cities"/>.
		/// </summary>
		/// <value>The source Cities for CityId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Cities CityIdSource
      	{
            get { return this._cityIdSource; }
            set { this._cityIdSource = value; }
      	}
		private Countries _countryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Countries"/>.
		/// </summary>
		/// <value>The source Countries for CountryId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Countries CountryIdSource
      	{
            get { return this._countryIdSource; }
            set { this._countryIdSource = value; }
      	}
		private DeliveredDays _daliveredDaysIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="DeliveredDays"/>.
		/// </summary>
		/// <value>The source DeliveredDays for DaliveredDaysId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual DeliveredDays DaliveredDaysIdSource
      	{
            get { return this._daliveredDaysIdSource; }
            set { this._daliveredDaysIdSource = value; }
      	}
		private States _stateIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="States"/>.
		/// </summary>
		/// <value>The source States for StateId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual States StateIdSource
      	{
            get { return this._stateIdSource; }
            set { this._stateIdSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region DistributorsOrdersCollection
		
		private TList<DistributorsOrders> _distributorsOrdersDistributorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _distributorsOrdersDistributorId
		/// </summary>
		
		public TList<DistributorsOrders> DistributorsOrdersCollection
		{
			get
			{
				if (_distributorsOrdersDistributorId == null)
				{
				_distributorsOrdersDistributorId = new TList<DistributorsOrders>();
				}
	
				return _distributorsOrdersDistributorId;
			}
			set { _distributorsOrdersDistributorId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			DistributarsEntityData _tmp = new DistributarsEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.Name = this.Name;
			_tmp.FirstName = this.FirstName;
			_tmp.LastName = this.LastName;
			_tmp.Address = this.Address;
			_tmp.StateId = this.StateId;
			_tmp.CityId = this.CityId;
			_tmp.CountryId = this.CountryId;
			_tmp.Pin = this.Pin;
			_tmp.DaliveredDaysId = this.DaliveredDaysId;
			_tmp.Description = this.Description;
			_tmp.MobileNo = this.MobileNo;
			_tmp.LandNo = this.LandNo;
			_tmp.IsActive = this.IsActive;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.DeletedDate = this.DeletedDate;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			if (this.CityIdSource != null)
				_tmp.CityIdSource = MakeCopyOf(this.CityIdSource) as Cities;
			if (this.CountryIdSource != null)
				_tmp.CountryIdSource = MakeCopyOf(this.CountryIdSource) as Countries;
			if (this.DaliveredDaysIdSource != null)
				_tmp.DaliveredDaysIdSource = MakeCopyOf(this.DaliveredDaysIdSource) as DeliveredDays;
			if (this.StateIdSource != null)
				_tmp.StateIdSource = MakeCopyOf(this.StateIdSource) as States;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._distributorsOrdersDistributorId != null)
				_tmp.DistributorsOrdersCollection = (TList<DistributorsOrders>) MakeCopyOf(this.DistributorsOrdersCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			DistributarsEntityData _tmp = new DistributarsEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.Name = this.Name;
			_tmp.FirstName = this.FirstName;
			_tmp.LastName = this.LastName;
			_tmp.Address = this.Address;
			_tmp.StateId = this.StateId;
			_tmp.CityId = this.CityId;
			_tmp.CountryId = this.CountryId;
			_tmp.Pin = this.Pin;
			_tmp.DaliveredDaysId = this.DaliveredDaysId;
			_tmp.Description = this.Description;
			_tmp.MobileNo = this.MobileNo;
			_tmp.LandNo = this.LandNo;
			_tmp.IsActive = this.IsActive;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.DeletedDate = this.DeletedDate;
			_tmp.ModifiedDate = this.ModifiedDate;
			
			#region Source Parent Composite Entities
			if (this.CityIdSource != null && existingCopies.Contains(this.CityIdSource))
				_tmp.CityIdSource = existingCopies[this.CityIdSource] as Cities;
			else
				_tmp.CityIdSource = MakeCopyOf(this.CityIdSource, existingCopies) as Cities;
			if (this.CountryIdSource != null && existingCopies.Contains(this.CountryIdSource))
				_tmp.CountryIdSource = existingCopies[this.CountryIdSource] as Countries;
			else
				_tmp.CountryIdSource = MakeCopyOf(this.CountryIdSource, existingCopies) as Countries;
			if (this.DaliveredDaysIdSource != null && existingCopies.Contains(this.DaliveredDaysIdSource))
				_tmp.DaliveredDaysIdSource = existingCopies[this.DaliveredDaysIdSource] as DeliveredDays;
			else
				_tmp.DaliveredDaysIdSource = MakeCopyOf(this.DaliveredDaysIdSource, existingCopies) as DeliveredDays;
			if (this.StateIdSource != null && existingCopies.Contains(this.StateIdSource))
				_tmp.StateIdSource = existingCopies[this.StateIdSource] as States;
			else
				_tmp.StateIdSource = MakeCopyOf(this.StateIdSource, existingCopies) as States;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.DistributorsOrdersCollection = (TList<DistributorsOrders>) MakeCopyOf(this.DistributorsOrdersCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DistributarsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(DistributarsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DistributarsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(DistributarsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DistributarsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(DistributarsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				DistributarsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new DistributarsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DistributarsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(DistributarsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				DistributarsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new DistributarsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region DistributarsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Distributars"/> object.
	/// </remarks>
	public class DistributarsEventArgs : System.EventArgs
	{
		private DistributarsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the DistributarsEventArgs class.
		///</summary>
		public DistributarsEventArgs(DistributarsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the DistributarsEventArgs class.
		///</summary>
		public DistributarsEventArgs(DistributarsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The DistributarsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="DistributarsColumn" />
		public DistributarsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Distributars related events.
	///</summary>
	public delegate void DistributarsEventHandler(object sender, DistributarsEventArgs e);
	
	#region DistributarsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class DistributarsComparer : System.Collections.Generic.IComparer<Distributars>
	{
		DistributarsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:DistributarsComparer"/> class.
        /// </summary>
		public DistributarsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:DistributarsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public DistributarsComparer(DistributarsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Distributars"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Distributars"/> to compare.</param>
        /// <param name="b">The second <c>Distributars</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Distributars a, Distributars b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Distributars entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Distributars a, Distributars b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public DistributarsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region DistributarsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Distributars"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class DistributarsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the DistributarsKey class.
		/// </summary>
		public DistributarsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the DistributarsKey class.
		/// </summary>
		public DistributarsKey(DistributarsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the DistributarsKey class.
		/// </summary>
		public DistributarsKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private DistributarsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public DistributarsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region DistributarsColumn Enum
	
	/// <summary>
	/// Enumerate the Distributars columns.
	/// </summary>
	[Serializable]
	public enum DistributarsColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Name = 2,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("First Name")]
		[ColumnEnum("FirstName", typeof(System.String), System.Data.DbType.String, false, false, true)]
		FirstName = 3,
		/// <summary>
		/// LastName : 
		/// </summary>
		[EnumTextValue("Last Name")]
		[ColumnEnum("LastName", typeof(System.String), System.Data.DbType.String, false, false, true)]
		LastName = 4,
		/// <summary>
		/// Address : 
		/// </summary>
		[EnumTextValue("Address")]
		[ColumnEnum("Address", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Address = 5,
		/// <summary>
		/// StateId : 
		/// </summary>
		[EnumTextValue("State Id")]
		[ColumnEnum("StateID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		StateId = 6,
		/// <summary>
		/// CityId : 
		/// </summary>
		[EnumTextValue("City Id")]
		[ColumnEnum("CityID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CityId = 7,
		/// <summary>
		/// CountryId : 
		/// </summary>
		[EnumTextValue("Country Id")]
		[ColumnEnum("CountryID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CountryId = 8,
		/// <summary>
		/// Pin : 
		/// </summary>
		[EnumTextValue("Pin")]
		[ColumnEnum("Pin", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Pin = 9,
		/// <summary>
		/// DaliveredDaysId : 
		/// </summary>
		[EnumTextValue("Dalivered Days Id")]
		[ColumnEnum("DaliveredDaysID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DaliveredDaysId = 10,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Description = 11,
		/// <summary>
		/// MobileNo : 
		/// </summary>
		[EnumTextValue("Mobile No")]
		[ColumnEnum("MobileNo", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		MobileNo = 12,
		/// <summary>
		/// LandNo : 
		/// </summary>
		[EnumTextValue("Land No")]
		[ColumnEnum("LandNo", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		LandNo = 13,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("Is Active")]
		[ColumnEnum("IsActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 14,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("Created Date")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedDate = 15,
		/// <summary>
		/// DeletedDate : 
		/// </summary>
		[EnumTextValue("Deleted Date")]
		[ColumnEnum("DeletedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DeletedDate = 16,
		/// <summary>
		/// ModifiedDate : 
		/// </summary>
		[EnumTextValue("Modified Date")]
		[ColumnEnum("ModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ModifiedDate = 17
	}//End enum

	#endregion DistributarsColumn Enum

} // end namespace

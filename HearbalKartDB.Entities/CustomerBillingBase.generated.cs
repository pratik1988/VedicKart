
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CustomerBilling.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using HearbalKartDB.Entities.Validation;
#endregion

namespace HearbalKartDB.Entities
{
	///<summary>
	/// An object representation of the 'CustomerBilling' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CustomerBillingBase : EntityBase, ICustomerBilling, IEntityId<CustomerBillingKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CustomerBillingEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CustomerBillingEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CustomerBillingEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CustomerBilling> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CustomerBillingEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CustomerBillingEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CustomerBillingBase"/> instance.
		///</summary>
		public CustomerBillingBase()
		{
			this.entityData = new CustomerBillingEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CustomerBillingBase"/> instance.
		///</summary>
		///<param name="_name"></param>
		///<param name="_address"></param>
		///<param name="_landMark"></param>
		///<param name="_pinCode"></param>
		///<param name="_phone"></param>
		///<param name="_cityId"></param>
		///<param name="_stateId"></param>
		///<param name="_countryId"></param>
		///<param name="_isActive"></param>
		///<param name="_orderId"></param>
		///<param name="_customerId"></param>
		///<param name="_addressTypeid"></param>
		///<param name="_createdDate"></param>
		///<param name="_modifiedDate"></param>
		///<param name="_deletedDate"></param>
		public CustomerBillingBase(System.String _name, System.String _address, System.String _landMark, 
			System.Int64? _pinCode, System.Int64? _phone, System.Int32? _cityId, System.Int32? _stateId, 
			System.Int32? _countryId, System.Boolean? _isActive, System.Int32? _orderId, 
			System.Int32? _customerId, System.Int32? _addressTypeid, System.DateTime? _createdDate, 
			System.DateTime? _modifiedDate, System.DateTime? _deletedDate)
		{
			this.entityData = new CustomerBillingEntityData();
			this.backupData = null;

			this.Name = _name;
			this.Address = _address;
			this.LandMark = _landMark;
			this.PinCode = _pinCode;
			this.Phone = _phone;
			this.CityId = _cityId;
			this.StateId = _stateId;
			this.CountryId = _countryId;
			this.IsActive = _isActive;
			this.OrderId = _orderId;
			this.CustomerId = _customerId;
			this.AddressTypeid = _addressTypeid;
			this.CreatedDate = _createdDate;
			this.ModifiedDate = _modifiedDate;
			this.DeletedDate = _deletedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CustomerBilling"/> instance.
		///</summary>
		///<param name="_name"></param>
		///<param name="_address"></param>
		///<param name="_landMark"></param>
		///<param name="_pinCode"></param>
		///<param name="_phone"></param>
		///<param name="_cityId"></param>
		///<param name="_stateId"></param>
		///<param name="_countryId"></param>
		///<param name="_isActive"></param>
		///<param name="_orderId"></param>
		///<param name="_customerId"></param>
		///<param name="_addressTypeid"></param>
		///<param name="_createdDate"></param>
		///<param name="_modifiedDate"></param>
		///<param name="_deletedDate"></param>
		public static CustomerBilling CreateCustomerBilling(System.String _name, System.String _address, System.String _landMark, 
			System.Int64? _pinCode, System.Int64? _phone, System.Int32? _cityId, System.Int32? _stateId, 
			System.Int32? _countryId, System.Boolean? _isActive, System.Int32? _orderId, 
			System.Int32? _customerId, System.Int32? _addressTypeid, System.DateTime? _createdDate, 
			System.DateTime? _modifiedDate, System.DateTime? _deletedDate)
		{
			CustomerBilling newCustomerBilling = new CustomerBilling();
			newCustomerBilling.Name = _name;
			newCustomerBilling.Address = _address;
			newCustomerBilling.LandMark = _landMark;
			newCustomerBilling.PinCode = _pinCode;
			newCustomerBilling.Phone = _phone;
			newCustomerBilling.CityId = _cityId;
			newCustomerBilling.StateId = _stateId;
			newCustomerBilling.CountryId = _countryId;
			newCustomerBilling.IsActive = _isActive;
			newCustomerBilling.OrderId = _orderId;
			newCustomerBilling.CustomerId = _customerId;
			newCustomerBilling.AddressTypeid = _addressTypeid;
			newCustomerBilling.CreatedDate = _createdDate;
			newCustomerBilling.ModifiedDate = _modifiedDate;
			newCustomerBilling.DeletedDate = _deletedDate;
			return newCustomerBilling;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Id is required")]




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(CustomerBillingColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerBillingColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
				
                OnPropertyChanging("Name");                    
				OnColumnChanging(CustomerBillingColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerBillingColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Address
		{
			get
			{
				return this.entityData.Address; 
			}
			
			set
			{
				if (this.entityData.Address == value)
					return;
				
                OnPropertyChanging("Address");                    
				OnColumnChanging(CustomerBillingColumn.Address, this.entityData.Address);
				this.entityData.Address = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerBillingColumn.Address, this.entityData.Address);
				OnPropertyChanged("Address");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LandMark property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String LandMark
		{
			get
			{
				return this.entityData.LandMark; 
			}
			
			set
			{
				if (this.entityData.LandMark == value)
					return;
				
                OnPropertyChanging("LandMark");                    
				OnColumnChanging(CustomerBillingColumn.LandMark, this.entityData.LandMark);
				this.entityData.LandMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerBillingColumn.LandMark, this.entityData.LandMark);
				OnPropertyChanged("LandMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PinCode property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? PinCode
		{
			get
			{
				return this.entityData.PinCode; 
			}
			
			set
			{
				if (this.entityData.PinCode == value)
					return;
				
                OnPropertyChanging("PinCode");                    
				OnColumnChanging(CustomerBillingColumn.PinCode, this.entityData.PinCode);
				this.entityData.PinCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerBillingColumn.PinCode, this.entityData.PinCode);
				OnPropertyChanged("PinCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Phone
		{
			get
			{
				return this.entityData.Phone; 
			}
			
			set
			{
				if (this.entityData.Phone == value)
					return;
				
                OnPropertyChanging("Phone");                    
				OnColumnChanging(CustomerBillingColumn.Phone, this.entityData.Phone);
				this.entityData.Phone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerBillingColumn.Phone, this.entityData.Phone);
				OnPropertyChanged("Phone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CityId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CityId
		{
			get
			{
				return this.entityData.CityId; 
			}
			
			set
			{
				if (this.entityData.CityId == value)
					return;
				
                OnPropertyChanging("CityId");                    
				OnColumnChanging(CustomerBillingColumn.CityId, this.entityData.CityId);
				this.entityData.CityId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerBillingColumn.CityId, this.entityData.CityId);
				OnPropertyChanged("CityId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StateId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? StateId
		{
			get
			{
				return this.entityData.StateId; 
			}
			
			set
			{
				if (this.entityData.StateId == value)
					return;
				
                OnPropertyChanging("StateId");                    
				OnColumnChanging(CustomerBillingColumn.StateId, this.entityData.StateId);
				this.entityData.StateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerBillingColumn.StateId, this.entityData.StateId);
				OnPropertyChanged("StateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CountryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CountryId
		{
			get
			{
				return this.entityData.CountryId; 
			}
			
			set
			{
				if (this.entityData.CountryId == value)
					return;
				
                OnPropertyChanging("CountryId");                    
				OnColumnChanging(CustomerBillingColumn.CountryId, this.entityData.CountryId);
				this.entityData.CountryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerBillingColumn.CountryId, this.entityData.CountryId);
				OnPropertyChanged("CountryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
				
                OnPropertyChanging("IsActive");                    
				OnColumnChanging(CustomerBillingColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerBillingColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrderId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? OrderId
		{
			get
			{
				return this.entityData.OrderId; 
			}
			
			set
			{
				if (this.entityData.OrderId == value)
					return;
				
                OnPropertyChanging("OrderId");                    
				OnColumnChanging(CustomerBillingColumn.OrderId, this.entityData.OrderId);
				this.entityData.OrderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerBillingColumn.OrderId, this.entityData.OrderId);
				OnPropertyChanged("OrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CustomerId
		{
			get
			{
				return this.entityData.CustomerId; 
			}
			
			set
			{
				if (this.entityData.CustomerId == value)
					return;
				
                OnPropertyChanging("CustomerId");                    
				OnColumnChanging(CustomerBillingColumn.CustomerId, this.entityData.CustomerId);
				this.entityData.CustomerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerBillingColumn.CustomerId, this.entityData.CustomerId);
				OnPropertyChanged("CustomerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddressTypeid property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AddressTypeid
		{
			get
			{
				return this.entityData.AddressTypeid; 
			}
			
			set
			{
				if (this.entityData.AddressTypeid == value)
					return;
				
                OnPropertyChanging("AddressTypeid");                    
				OnColumnChanging(CustomerBillingColumn.AddressTypeid, this.entityData.AddressTypeid);
				this.entityData.AddressTypeid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerBillingColumn.AddressTypeid, this.entityData.AddressTypeid);
				OnPropertyChanged("AddressTypeid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
				
                OnPropertyChanging("CreatedDate");                    
				OnColumnChanging(CustomerBillingColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerBillingColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ModifiedDate
		{
			get
			{
				return this.entityData.ModifiedDate; 
			}
			
			set
			{
				if (this.entityData.ModifiedDate == value)
					return;
				
                OnPropertyChanging("ModifiedDate");                    
				OnColumnChanging(CustomerBillingColumn.ModifiedDate, this.entityData.ModifiedDate);
				this.entityData.ModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerBillingColumn.ModifiedDate, this.entityData.ModifiedDate);
				OnPropertyChanged("ModifiedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeletedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DeletedDate
		{
			get
			{
				return this.entityData.DeletedDate; 
			}
			
			set
			{
				if (this.entityData.DeletedDate == value)
					return;
				
                OnPropertyChanging("DeletedDate");                    
				OnColumnChanging(CustomerBillingColumn.DeletedDate, this.entityData.DeletedDate);
				this.entityData.DeletedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerBillingColumn.DeletedDate, this.entityData.DeletedDate);
				OnPropertyChanged("DeletedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Cities"/>.
		/// </summary>
		/// <value>The source Cities for CityId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Cities CityIdSource
      	{
            get { return entityData.CityIdSource; }
            set { entityData.CityIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Countries"/>.
		/// </summary>
		/// <value>The source Countries for CountryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Countries CountryIdSource
      	{
            get { return entityData.CountryIdSource; }
            set { entityData.CountryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Customers"/>.
		/// </summary>
		/// <value>The source Customers for CustomerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Customers CustomerIdSource
      	{
            get { return entityData.CustomerIdSource; }
            set { entityData.CustomerIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Orders"/>.
		/// </summary>
		/// <value>The source Orders for OrderId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Orders OrderIdSource
      	{
            get { return entityData.OrderIdSource; }
            set { entityData.OrderIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="States"/>.
		/// </summary>
		/// <value>The source States for StateId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual States StateIdSource
      	{
            get { return entityData.StateIdSource; }
            set { entityData.StateIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of Orders objects
		///	which are related to this object through the relation FK_Orders_CustomerBilling
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Orders> OrdersCollection
		{
			get { return entityData.OrdersCollection; }
			set { entityData.OrdersCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CustomerBilling"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "Name", "Address", "LandMark", "PinCode", "Phone", "CityID", "StateID", "CountryID", "IsActive", "OrderID", "CustomerID", "AddressTypeiD", "CreatedDate", "ModifiedDate", "DeletedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CustomerBillingEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CustomerBilling) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CustomerBilling>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CustomerBilling);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CustomerBilling Entity 
		///</summary>
		protected virtual CustomerBilling Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			CustomerBilling copy = new CustomerBilling();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.Name = this.Name;
				copy.Address = this.Address;
				copy.LandMark = this.LandMark;
				copy.PinCode = this.PinCode;
				copy.Phone = this.Phone;
				copy.CityId = this.CityId;
				copy.StateId = this.StateId;
				copy.CountryId = this.CountryId;
				copy.IsActive = this.IsActive;
				copy.OrderId = this.OrderId;
				copy.CustomerId = this.CustomerId;
				copy.AddressTypeid = this.AddressTypeid;
				copy.CreatedDate = this.CreatedDate;
				copy.ModifiedDate = this.ModifiedDate;
				copy.DeletedDate = this.DeletedDate;
			
			if (this.CityIdSource != null && existingCopies.Contains(this.CityIdSource))
				copy.CityIdSource = existingCopies[this.CityIdSource] as Cities;
			else
				copy.CityIdSource = MakeCopyOf(this.CityIdSource, existingCopies) as Cities;
			if (this.CountryIdSource != null && existingCopies.Contains(this.CountryIdSource))
				copy.CountryIdSource = existingCopies[this.CountryIdSource] as Countries;
			else
				copy.CountryIdSource = MakeCopyOf(this.CountryIdSource, existingCopies) as Countries;
			if (this.CustomerIdSource != null && existingCopies.Contains(this.CustomerIdSource))
				copy.CustomerIdSource = existingCopies[this.CustomerIdSource] as Customers;
			else
				copy.CustomerIdSource = MakeCopyOf(this.CustomerIdSource, existingCopies) as Customers;
			if (this.OrderIdSource != null && existingCopies.Contains(this.OrderIdSource))
				copy.OrderIdSource = existingCopies[this.OrderIdSource] as Orders;
			else
				copy.OrderIdSource = MakeCopyOf(this.OrderIdSource, existingCopies) as Orders;
			if (this.StateIdSource != null && existingCopies.Contains(this.StateIdSource))
				copy.StateIdSource = existingCopies[this.StateIdSource] as States;
			else
				copy.StateIdSource = MakeCopyOf(this.StateIdSource, existingCopies) as States;
		
			//deep copy nested objects
			copy.OrdersCollection = (TList<Orders>) MakeCopyOf(this.OrdersCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed CustomerBilling Entity 
		///</summary>
		public virtual CustomerBilling Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed CustomerBilling Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CustomerBilling DeepCopy()
		{
			return EntityHelper.Clone<CustomerBilling>(this as CustomerBilling);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CustomerBillingEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CustomerBillingEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CustomerBillingEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CustomerBillingColumn column)
		{
			switch(column)
			{
					case CustomerBillingColumn.Id:
					return entityData.Id != _originalData.Id;
					case CustomerBillingColumn.Name:
					return entityData.Name != _originalData.Name;
					case CustomerBillingColumn.Address:
					return entityData.Address != _originalData.Address;
					case CustomerBillingColumn.LandMark:
					return entityData.LandMark != _originalData.LandMark;
					case CustomerBillingColumn.PinCode:
					return entityData.PinCode != _originalData.PinCode;
					case CustomerBillingColumn.Phone:
					return entityData.Phone != _originalData.Phone;
					case CustomerBillingColumn.CityId:
					return entityData.CityId != _originalData.CityId;
					case CustomerBillingColumn.StateId:
					return entityData.StateId != _originalData.StateId;
					case CustomerBillingColumn.CountryId:
					return entityData.CountryId != _originalData.CountryId;
					case CustomerBillingColumn.IsActive:
					return entityData.IsActive != _originalData.IsActive;
					case CustomerBillingColumn.OrderId:
					return entityData.OrderId != _originalData.OrderId;
					case CustomerBillingColumn.CustomerId:
					return entityData.CustomerId != _originalData.CustomerId;
					case CustomerBillingColumn.AddressTypeid:
					return entityData.AddressTypeid != _originalData.AddressTypeid;
					case CustomerBillingColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case CustomerBillingColumn.ModifiedDate:
					return entityData.ModifiedDate != _originalData.ModifiedDate;
					case CustomerBillingColumn.DeletedDate:
					return entityData.DeletedDate != _originalData.DeletedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CustomerBillingColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.Address != _originalData.Address;
			result = result || entityData.LandMark != _originalData.LandMark;
			result = result || entityData.PinCode != _originalData.PinCode;
			result = result || entityData.Phone != _originalData.Phone;
			result = result || entityData.CityId != _originalData.CityId;
			result = result || entityData.StateId != _originalData.StateId;
			result = result || entityData.CountryId != _originalData.CountryId;
			result = result || entityData.IsActive != _originalData.IsActive;
			result = result || entityData.OrderId != _originalData.OrderId;
			result = result || entityData.CustomerId != _originalData.CustomerId;
			result = result || entityData.AddressTypeid != _originalData.AddressTypeid;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.ModifiedDate != _originalData.ModifiedDate;
			result = result || entityData.DeletedDate != _originalData.DeletedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a CustomerBilling Entity with the original data.
		///</summary>
		public CustomerBilling GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCustomerBilling(
				_originalData.Name,
				_originalData.Address,
				_originalData.LandMark,
				_originalData.PinCode,
				_originalData.Phone,
				_originalData.CityId,
				_originalData.StateId,
				_originalData.CountryId,
				_originalData.IsActive,
				_originalData.OrderId,
				_originalData.CustomerId,
				_originalData.AddressTypeid,
				_originalData.CreatedDate,
				_originalData.ModifiedDate,
				_originalData.DeletedDate
				);
				
			return (CustomerBilling)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CustomerBillingBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CustomerBillingBase)
				return ValueEquals(this, (CustomerBillingBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CustomerBillingBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.Name == null) ? string.Empty : this.Name.ToString()).GetHashCode() ^ 
					((this.Address == null) ? string.Empty : this.Address.ToString()).GetHashCode() ^ 
					((this.LandMark == null) ? string.Empty : this.LandMark.ToString()).GetHashCode() ^ 
					((this.PinCode == null) ? string.Empty : this.PinCode.ToString()).GetHashCode() ^ 
					((this.Phone == null) ? string.Empty : this.Phone.ToString()).GetHashCode() ^ 
					((this.CityId == null) ? string.Empty : this.CityId.ToString()).GetHashCode() ^ 
					((this.StateId == null) ? string.Empty : this.StateId.ToString()).GetHashCode() ^ 
					((this.CountryId == null) ? string.Empty : this.CountryId.ToString()).GetHashCode() ^ 
					((this.IsActive == null) ? string.Empty : this.IsActive.ToString()).GetHashCode() ^ 
					((this.OrderId == null) ? string.Empty : this.OrderId.ToString()).GetHashCode() ^ 
					((this.CustomerId == null) ? string.Empty : this.CustomerId.ToString()).GetHashCode() ^ 
					((this.AddressTypeid == null) ? string.Empty : this.AddressTypeid.ToString()).GetHashCode() ^ 
					((this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString()).GetHashCode() ^ 
					((this.ModifiedDate == null) ? string.Empty : this.ModifiedDate.ToString()).GetHashCode() ^ 
					((this.DeletedDate == null) ? string.Empty : this.DeletedDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CustomerBillingBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CustomerBillingBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CustomerBillingBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CustomerBillingBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CustomerBillingBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CustomerBillingBase Object1, CustomerBillingBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object2.Name == null )
			{
				equal = false;
			}
			if ( Object1.Address != null && Object2.Address != null )
			{
				if (Object1.Address != Object2.Address)
					equal = false;
			}
			else if (Object1.Address == null ^ Object2.Address == null )
			{
				equal = false;
			}
			if ( Object1.LandMark != null && Object2.LandMark != null )
			{
				if (Object1.LandMark != Object2.LandMark)
					equal = false;
			}
			else if (Object1.LandMark == null ^ Object2.LandMark == null )
			{
				equal = false;
			}
			if ( Object1.PinCode != null && Object2.PinCode != null )
			{
				if (Object1.PinCode != Object2.PinCode)
					equal = false;
			}
			else if (Object1.PinCode == null ^ Object2.PinCode == null )
			{
				equal = false;
			}
			if ( Object1.Phone != null && Object2.Phone != null )
			{
				if (Object1.Phone != Object2.Phone)
					equal = false;
			}
			else if (Object1.Phone == null ^ Object2.Phone == null )
			{
				equal = false;
			}
			if ( Object1.CityId != null && Object2.CityId != null )
			{
				if (Object1.CityId != Object2.CityId)
					equal = false;
			}
			else if (Object1.CityId == null ^ Object2.CityId == null )
			{
				equal = false;
			}
			if ( Object1.StateId != null && Object2.StateId != null )
			{
				if (Object1.StateId != Object2.StateId)
					equal = false;
			}
			else if (Object1.StateId == null ^ Object2.StateId == null )
			{
				equal = false;
			}
			if ( Object1.CountryId != null && Object2.CountryId != null )
			{
				if (Object1.CountryId != Object2.CountryId)
					equal = false;
			}
			else if (Object1.CountryId == null ^ Object2.CountryId == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.OrderId != null && Object2.OrderId != null )
			{
				if (Object1.OrderId != Object2.OrderId)
					equal = false;
			}
			else if (Object1.OrderId == null ^ Object2.OrderId == null )
			{
				equal = false;
			}
			if ( Object1.CustomerId != null && Object2.CustomerId != null )
			{
				if (Object1.CustomerId != Object2.CustomerId)
					equal = false;
			}
			else if (Object1.CustomerId == null ^ Object2.CustomerId == null )
			{
				equal = false;
			}
			if ( Object1.AddressTypeid != null && Object2.AddressTypeid != null )
			{
				if (Object1.AddressTypeid != Object2.AddressTypeid)
					equal = false;
			}
			else if (Object1.AddressTypeid == null ^ Object2.AddressTypeid == null )
			{
				equal = false;
			}
			if ( Object1.CreatedDate != null && Object2.CreatedDate != null )
			{
				if (Object1.CreatedDate != Object2.CreatedDate)
					equal = false;
			}
			else if (Object1.CreatedDate == null ^ Object2.CreatedDate == null )
			{
				equal = false;
			}
			if ( Object1.ModifiedDate != null && Object2.ModifiedDate != null )
			{
				if (Object1.ModifiedDate != Object2.ModifiedDate)
					equal = false;
			}
			else if (Object1.ModifiedDate == null ^ Object2.ModifiedDate == null )
			{
				equal = false;
			}
			if ( Object1.DeletedDate != null && Object2.DeletedDate != null )
			{
				if (Object1.DeletedDate != Object2.DeletedDate)
					equal = false;
			}
			else if (Object1.DeletedDate == null ^ Object2.DeletedDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CustomerBillingBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CustomerBillingComparer GetComparer()
        {
            return new CustomerBillingComparer();
        }
        */

        // Comparer delegates back to CustomerBilling
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CustomerBilling rhs, CustomerBillingColumn which)
        {
            switch (which)
            {
            	
            	
            	case CustomerBillingColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case CustomerBillingColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case CustomerBillingColumn.Address:
            		return this.Address.CompareTo(rhs.Address);
            		
            		                 
            	
            	
            	case CustomerBillingColumn.LandMark:
            		return this.LandMark.CompareTo(rhs.LandMark);
            		
            		                 
            	
            	
            	case CustomerBillingColumn.PinCode:
            		return this.PinCode.Value.CompareTo(rhs.PinCode.Value);
            		
            		                 
            	
            	
            	case CustomerBillingColumn.Phone:
            		return this.Phone.Value.CompareTo(rhs.Phone.Value);
            		
            		                 
            	
            	
            	case CustomerBillingColumn.CityId:
            		return this.CityId.Value.CompareTo(rhs.CityId.Value);
            		
            		                 
            	
            	
            	case CustomerBillingColumn.StateId:
            		return this.StateId.Value.CompareTo(rhs.StateId.Value);
            		
            		                 
            	
            	
            	case CustomerBillingColumn.CountryId:
            		return this.CountryId.Value.CompareTo(rhs.CountryId.Value);
            		
            		                 
            	
            	
            	case CustomerBillingColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case CustomerBillingColumn.OrderId:
            		return this.OrderId.Value.CompareTo(rhs.OrderId.Value);
            		
            		                 
            	
            	
            	case CustomerBillingColumn.CustomerId:
            		return this.CustomerId.Value.CompareTo(rhs.CustomerId.Value);
            		
            		                 
            	
            	
            	case CustomerBillingColumn.AddressTypeid:
            		return this.AddressTypeid.Value.CompareTo(rhs.AddressTypeid.Value);
            		
            		                 
            	
            	
            	case CustomerBillingColumn.CreatedDate:
            		return this.CreatedDate.Value.CompareTo(rhs.CreatedDate.Value);
            		
            		                 
            	
            	
            	case CustomerBillingColumn.ModifiedDate:
            		return this.ModifiedDate.Value.CompareTo(rhs.ModifiedDate.Value);
            		
            		                 
            	
            	
            	case CustomerBillingColumn.DeletedDate:
            		return this.DeletedDate.Value.CompareTo(rhs.DeletedDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CustomerBillingKey> Members
		
		// member variable for the EntityId property
		private CustomerBillingKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CustomerBillingKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CustomerBillingKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CustomerBilling")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- Id: {0}{16}- Name: {1}{16}- Address: {2}{16}- LandMark: {3}{16}- PinCode: {4}{16}- Phone: {5}{16}- CityId: {6}{16}- StateId: {7}{16}- CountryId: {8}{16}- IsActive: {9}{16}- OrderId: {10}{16}- CustomerId: {11}{16}- AddressTypeid: {12}{16}- CreatedDate: {13}{16}- ModifiedDate: {14}{16}- DeletedDate: {15}{16}{18}", 
				this.Id,
				(this.Name == null) ? string.Empty : this.Name.ToString(),
				(this.Address == null) ? string.Empty : this.Address.ToString(),
				(this.LandMark == null) ? string.Empty : this.LandMark.ToString(),
				(this.PinCode == null) ? string.Empty : this.PinCode.ToString(),
				(this.Phone == null) ? string.Empty : this.Phone.ToString(),
				(this.CityId == null) ? string.Empty : this.CityId.ToString(),
				(this.StateId == null) ? string.Empty : this.StateId.ToString(),
				(this.CountryId == null) ? string.Empty : this.CountryId.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.OrderId == null) ? string.Empty : this.OrderId.ToString(),
				(this.CustomerId == null) ? string.Empty : this.CustomerId.ToString(),
				(this.AddressTypeid == null) ? string.Empty : this.AddressTypeid.ToString(),
				(this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString(),
				(this.ModifiedDate == null) ? string.Empty : this.ModifiedDate.ToString(),
				(this.DeletedDate == null) ? string.Empty : this.DeletedDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CustomerBilling' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CustomerBillingEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "CustomerBilling"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String Name = null;
		
		/// <summary>
		/// Address : 
		/// </summary>
		public System.String Address = null;
		
		/// <summary>
		/// LandMark : 
		/// </summary>
		public System.String LandMark = null;
		
		/// <summary>
		/// PinCode : 
		/// </summary>
		public System.Int64? PinCode = null;
		
		/// <summary>
		/// Phone : 
		/// </summary>
		public System.Int64? Phone = null;
		
		/// <summary>
		/// CityID : 
		/// </summary>
		public System.Int32? CityId = null;
		
		/// <summary>
		/// StateID : 
		/// </summary>
		public System.Int32? StateId = null;
		
		/// <summary>
		/// CountryID : 
		/// </summary>
		public System.Int32? CountryId = null;
		
		/// <summary>
		/// IsActive : 
		/// </summary>
		public System.Boolean? IsActive = null;
		
		/// <summary>
		/// OrderID : 
		/// </summary>
		public System.Int32? OrderId = null;
		
		/// <summary>
		/// CustomerID : 
		/// </summary>
		public System.Int32? CustomerId = null;
		
		/// <summary>
		/// AddressTypeiD : 
		/// </summary>
		public System.Int32? AddressTypeid = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime? CreatedDate = null;
		
		/// <summary>
		/// ModifiedDate : 
		/// </summary>
		public System.DateTime? ModifiedDate = null;
		
		/// <summary>
		/// DeletedDate : 
		/// </summary>
		public System.DateTime? DeletedDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Cities _cityIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Cities"/>.
		/// </summary>
		/// <value>The source Cities for CityId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Cities CityIdSource
      	{
            get { return this._cityIdSource; }
            set { this._cityIdSource = value; }
      	}
		private Countries _countryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Countries"/>.
		/// </summary>
		/// <value>The source Countries for CountryId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Countries CountryIdSource
      	{
            get { return this._countryIdSource; }
            set { this._countryIdSource = value; }
      	}
		private Customers _customerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Customers"/>.
		/// </summary>
		/// <value>The source Customers for CustomerId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Customers CustomerIdSource
      	{
            get { return this._customerIdSource; }
            set { this._customerIdSource = value; }
      	}
		private Orders _orderIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Orders"/>.
		/// </summary>
		/// <value>The source Orders for OrderId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Orders OrderIdSource
      	{
            get { return this._orderIdSource; }
            set { this._orderIdSource = value; }
      	}
		private States _stateIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="States"/>.
		/// </summary>
		/// <value>The source States for StateId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual States StateIdSource
      	{
            get { return this._stateIdSource; }
            set { this._stateIdSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region OrdersCollection
		
		private TList<Orders> _ordersBillingId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _ordersBillingId
		/// </summary>
		
		public TList<Orders> OrdersCollection
		{
			get
			{
				if (_ordersBillingId == null)
				{
				_ordersBillingId = new TList<Orders>();
				}
	
				return _ordersBillingId;
			}
			set { _ordersBillingId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CustomerBillingEntityData _tmp = new CustomerBillingEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.Name = this.Name;
			_tmp.Address = this.Address;
			_tmp.LandMark = this.LandMark;
			_tmp.PinCode = this.PinCode;
			_tmp.Phone = this.Phone;
			_tmp.CityId = this.CityId;
			_tmp.StateId = this.StateId;
			_tmp.CountryId = this.CountryId;
			_tmp.IsActive = this.IsActive;
			_tmp.OrderId = this.OrderId;
			_tmp.CustomerId = this.CustomerId;
			_tmp.AddressTypeid = this.AddressTypeid;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.ModifiedDate = this.ModifiedDate;
			_tmp.DeletedDate = this.DeletedDate;
			
			#region Source Parent Composite Entities
			if (this.CityIdSource != null)
				_tmp.CityIdSource = MakeCopyOf(this.CityIdSource) as Cities;
			if (this.CountryIdSource != null)
				_tmp.CountryIdSource = MakeCopyOf(this.CountryIdSource) as Countries;
			if (this.CustomerIdSource != null)
				_tmp.CustomerIdSource = MakeCopyOf(this.CustomerIdSource) as Customers;
			if (this.OrderIdSource != null)
				_tmp.OrderIdSource = MakeCopyOf(this.OrderIdSource) as Orders;
			if (this.StateIdSource != null)
				_tmp.StateIdSource = MakeCopyOf(this.StateIdSource) as States;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._ordersBillingId != null)
				_tmp.OrdersCollection = (TList<Orders>) MakeCopyOf(this.OrdersCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CustomerBillingEntityData _tmp = new CustomerBillingEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.Name = this.Name;
			_tmp.Address = this.Address;
			_tmp.LandMark = this.LandMark;
			_tmp.PinCode = this.PinCode;
			_tmp.Phone = this.Phone;
			_tmp.CityId = this.CityId;
			_tmp.StateId = this.StateId;
			_tmp.CountryId = this.CountryId;
			_tmp.IsActive = this.IsActive;
			_tmp.OrderId = this.OrderId;
			_tmp.CustomerId = this.CustomerId;
			_tmp.AddressTypeid = this.AddressTypeid;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.ModifiedDate = this.ModifiedDate;
			_tmp.DeletedDate = this.DeletedDate;
			
			#region Source Parent Composite Entities
			if (this.CityIdSource != null && existingCopies.Contains(this.CityIdSource))
				_tmp.CityIdSource = existingCopies[this.CityIdSource] as Cities;
			else
				_tmp.CityIdSource = MakeCopyOf(this.CityIdSource, existingCopies) as Cities;
			if (this.CountryIdSource != null && existingCopies.Contains(this.CountryIdSource))
				_tmp.CountryIdSource = existingCopies[this.CountryIdSource] as Countries;
			else
				_tmp.CountryIdSource = MakeCopyOf(this.CountryIdSource, existingCopies) as Countries;
			if (this.CustomerIdSource != null && existingCopies.Contains(this.CustomerIdSource))
				_tmp.CustomerIdSource = existingCopies[this.CustomerIdSource] as Customers;
			else
				_tmp.CustomerIdSource = MakeCopyOf(this.CustomerIdSource, existingCopies) as Customers;
			if (this.OrderIdSource != null && existingCopies.Contains(this.OrderIdSource))
				_tmp.OrderIdSource = existingCopies[this.OrderIdSource] as Orders;
			else
				_tmp.OrderIdSource = MakeCopyOf(this.OrderIdSource, existingCopies) as Orders;
			if (this.StateIdSource != null && existingCopies.Contains(this.StateIdSource))
				_tmp.StateIdSource = existingCopies[this.StateIdSource] as States;
			else
				_tmp.StateIdSource = MakeCopyOf(this.StateIdSource, existingCopies) as States;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.OrdersCollection = (TList<Orders>) MakeCopyOf(this.OrdersCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerBillingColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CustomerBillingColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerBillingColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CustomerBillingColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerBillingColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CustomerBillingColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				CustomerBillingEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CustomerBillingEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerBillingColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CustomerBillingColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CustomerBillingEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CustomerBillingEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CustomerBillingEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CustomerBilling"/> object.
	/// </remarks>
	public class CustomerBillingEventArgs : System.EventArgs
	{
		private CustomerBillingColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CustomerBillingEventArgs class.
		///</summary>
		public CustomerBillingEventArgs(CustomerBillingColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CustomerBillingEventArgs class.
		///</summary>
		public CustomerBillingEventArgs(CustomerBillingColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CustomerBillingColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CustomerBillingColumn" />
		public CustomerBillingColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CustomerBilling related events.
	///</summary>
	public delegate void CustomerBillingEventHandler(object sender, CustomerBillingEventArgs e);
	
	#region CustomerBillingComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CustomerBillingComparer : System.Collections.Generic.IComparer<CustomerBilling>
	{
		CustomerBillingColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CustomerBillingComparer"/> class.
        /// </summary>
		public CustomerBillingComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CustomerBillingComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CustomerBillingComparer(CustomerBillingColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="CustomerBilling"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="CustomerBilling"/> to compare.</param>
        /// <param name="b">The second <c>CustomerBilling</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CustomerBilling a, CustomerBilling b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CustomerBilling entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CustomerBilling a, CustomerBilling b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CustomerBillingColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CustomerBillingKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CustomerBilling"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CustomerBillingKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CustomerBillingKey class.
		/// </summary>
		public CustomerBillingKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CustomerBillingKey class.
		/// </summary>
		public CustomerBillingKey(CustomerBillingBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CustomerBillingKey class.
		/// </summary>
		public CustomerBillingKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CustomerBillingBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CustomerBillingBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CustomerBillingColumn Enum
	
	/// <summary>
	/// Enumerate the CustomerBilling columns.
	/// </summary>
	[Serializable]
	public enum CustomerBillingColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Name = 2,
		/// <summary>
		/// Address : 
		/// </summary>
		[EnumTextValue("Address")]
		[ColumnEnum("Address", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Address = 3,
		/// <summary>
		/// LandMark : 
		/// </summary>
		[EnumTextValue("Land Mark")]
		[ColumnEnum("LandMark", typeof(System.String), System.Data.DbType.String, false, false, true)]
		LandMark = 4,
		/// <summary>
		/// PinCode : 
		/// </summary>
		[EnumTextValue("Pin Code")]
		[ColumnEnum("PinCode", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		PinCode = 5,
		/// <summary>
		/// Phone : 
		/// </summary>
		[EnumTextValue("Phone")]
		[ColumnEnum("Phone", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Phone = 6,
		/// <summary>
		/// CityId : 
		/// </summary>
		[EnumTextValue("City Id")]
		[ColumnEnum("CityID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CityId = 7,
		/// <summary>
		/// StateId : 
		/// </summary>
		[EnumTextValue("State Id")]
		[ColumnEnum("StateID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		StateId = 8,
		/// <summary>
		/// CountryId : 
		/// </summary>
		[EnumTextValue("Country Id")]
		[ColumnEnum("CountryID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CountryId = 9,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("Is Active")]
		[ColumnEnum("IsActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 10,
		/// <summary>
		/// OrderId : 
		/// </summary>
		[EnumTextValue("Order Id")]
		[ColumnEnum("OrderID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		OrderId = 11,
		/// <summary>
		/// CustomerId : 
		/// </summary>
		[EnumTextValue("Customer Id")]
		[ColumnEnum("CustomerID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CustomerId = 12,
		/// <summary>
		/// AddressTypeid : 
		/// </summary>
		[EnumTextValue("Address Typeid")]
		[ColumnEnum("AddressTypeiD", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AddressTypeid = 13,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("Created Date")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedDate = 14,
		/// <summary>
		/// ModifiedDate : 
		/// </summary>
		[EnumTextValue("Modified Date")]
		[ColumnEnum("ModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ModifiedDate = 15,
		/// <summary>
		/// DeletedDate : 
		/// </summary>
		[EnumTextValue("Deleted Date")]
		[ColumnEnum("DeletedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DeletedDate = 16
	}//End enum

	#endregion CustomerBillingColumn Enum

} // end namespace
